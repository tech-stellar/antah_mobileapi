//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EpicWAS.Epicor.InvTransferSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IceTableset", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset))]
    public partial class IceTableset : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.ExtensionTableData[] ExtensionTablesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.ExtensionTableData[] ExtensionTables {
            get {
                return this.ExtensionTablesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionTablesField, value) != true)) {
                    this.ExtensionTablesField = value;
                    this.RaisePropertyChanged("ExtensionTables");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SelectSerialNumbersParamsTableset", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class SelectSerialNumbersParamsTableset : EpicWAS.Epicor.InvTransferSvc.IceTableset {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsTable SelectSerialNumbersParamsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsTable SelectSerialNumbersParams {
            get {
                return this.SelectSerialNumbersParamsField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectSerialNumbersParamsField, value) != true)) {
                    this.SelectSerialNumbersParamsField = value;
                    this.RaisePropertyChanged("SelectSerialNumbersParams");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvTransferTableset", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class InvTransferTableset : EpicWAS.Epicor.InvTransferSvc.IceTableset {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.InvTransTable InvTransField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.LegalNumGenOptsTable LegalNumGenOptsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.PartsTable PartsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.SNFormatTable SNFormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.SelectedSerialNumbersTable SelectedSerialNumbersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.InvTransTable InvTrans {
            get {
                return this.InvTransField;
            }
            set {
                if ((object.ReferenceEquals(this.InvTransField, value) != true)) {
                    this.InvTransField = value;
                    this.RaisePropertyChanged("InvTrans");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.LegalNumGenOptsTable LegalNumGenOpts {
            get {
                return this.LegalNumGenOptsField;
            }
            set {
                if ((object.ReferenceEquals(this.LegalNumGenOptsField, value) != true)) {
                    this.LegalNumGenOptsField = value;
                    this.RaisePropertyChanged("LegalNumGenOpts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.PartsTable Parts {
            get {
                return this.PartsField;
            }
            set {
                if ((object.ReferenceEquals(this.PartsField, value) != true)) {
                    this.PartsField = value;
                    this.RaisePropertyChanged("Parts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.SNFormatTable SNFormat {
            get {
                return this.SNFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.SNFormatField, value) != true)) {
                    this.SNFormatField = value;
                    this.RaisePropertyChanged("SNFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.SelectedSerialNumbersTable SelectedSerialNumbers {
            get {
                return this.SelectedSerialNumbersField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectedSerialNumbersField, value) != true)) {
                    this.SelectedSerialNumbersField = value;
                    this.RaisePropertyChanged("SelectedSerialNumbers");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtensionTableData", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions")]
    [System.SerializableAttribute()]
    public partial class ExtensionTableData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.ExtensionTable TableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.ExtensionTableColumn[] ColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PrimaryKeyColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeerTableSystemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeerTableNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.ExtensionTable Table {
            get {
                return this.TableField;
            }
            set {
                if ((object.ReferenceEquals(this.TableField, value) != true)) {
                    this.TableField = value;
                    this.RaisePropertyChanged("Table");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string SystemCode {
            get {
                return this.SystemCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemCodeField, value) != true)) {
                    this.SystemCodeField = value;
                    this.RaisePropertyChanged("SystemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public EpicWAS.Epicor.InvTransferSvc.ExtensionTableColumn[] Columns {
            get {
                return this.ColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnsField, value) != true)) {
                    this.ColumnsField = value;
                    this.RaisePropertyChanged("Columns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string[] PrimaryKeyColumns {
            get {
                return this.PrimaryKeyColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryKeyColumnsField, value) != true)) {
                    this.PrimaryKeyColumnsField = value;
                    this.RaisePropertyChanged("PrimaryKeyColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string PeerTableSystemCode {
            get {
                return this.PeerTableSystemCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PeerTableSystemCodeField, value) != true)) {
                    this.PeerTableSystemCodeField = value;
                    this.RaisePropertyChanged("PeerTableSystemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string PeerTableName {
            get {
                return this.PeerTableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PeerTableNameField, value) != true)) {
                    this.PeerTableNameField = value;
                    this.RaisePropertyChanged("PeerTableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="InvTransTable", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets", ItemName="InvTransRow")]
    [System.SerializableAttribute()]
    public class InvTransTable : System.Collections.Generic.List<EpicWAS.Epicor.InvTransferSvc.InvTransRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="LegalNumGenOptsTable", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets", ItemName="LegalNumGenOptsRow")]
    [System.SerializableAttribute()]
    public class LegalNumGenOptsTable : System.Collections.Generic.List<EpicWAS.Epicor.InvTransferSvc.LegalNumGenOptsRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="PartsTable", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets", ItemName="PartsRow")]
    [System.SerializableAttribute()]
    public class PartsTable : System.Collections.Generic.List<EpicWAS.Epicor.InvTransferSvc.PartsRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SNFormatTable", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets", ItemName="SNFormatRow")]
    [System.SerializableAttribute()]
    public class SNFormatTable : System.Collections.Generic.List<EpicWAS.Epicor.InvTransferSvc.SNFormatRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SelectedSerialNumbersTable", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets", ItemName="SelectedSerialNumbersRow")]
    [System.SerializableAttribute()]
    public class SelectedSerialNumbersTable : System.Collections.Generic.List<EpicWAS.Epicor.InvTransferSvc.SelectedSerialNumbersRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ExtensionTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions", ItemName="ExtensionRow")]
    [System.SerializableAttribute()]
    public class ExtensionTable : System.Collections.Generic.List<EpicWAS.Epicor.InvTransferSvc.ExtensionRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtensionTableColumn", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions")]
    [System.SerializableAttribute()]
    public partial class ExtensionTableColumn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColumnNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColumnTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnName {
            get {
                return this.ColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnNameField, value) != true)) {
                    this.ColumnNameField = value;
                    this.RaisePropertyChanged("ColumnName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnType {
            get {
                return this.ColumnTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnTypeField, value) != true)) {
                    this.ColumnTypeField = value;
                    this.RaisePropertyChanged("ColumnType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtensionRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.TempRowBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.IceTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.IceRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.UserDefinedColumns))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.ExtensionTableData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.ExtensionTableData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.ExtensionTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.ExtensionTableColumn[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.ExtensionTableColumn))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorExceptionData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorExceptionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.InvTransTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.InvTransRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.InvTransRowColumnOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.LegalNumGenOptsTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.LegalNumGenOptsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.LegalNumGenOptsRowColumnOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.PartsTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.PartsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.PartsRowColumnOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SNFormatTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SNFormatRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SNFormatRowColumnOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectedSerialNumbersTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectedSerialNumbersRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectedSerialNumbersRowColumnOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsRowColumnOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
    public partial class ExtensionRow : EpicWAS.Epicor.InvTransferSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object[] ColumnValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object[] ColumnValues {
            get {
                return this.ColumnValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnValuesField, value) != true)) {
                    this.ColumnValuesField = value;
                    this.RaisePropertyChanged("ColumnValues");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TempRowBase", Namespace="http://schemas.datacontract.org/2004/07/Epicor.Data")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.IceRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.InvTransRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.LegalNumGenOptsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.PartsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SNFormatRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectedSerialNumbersRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.ExtensionRow))]
    public partial class TempRowBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IceRow", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.InvTransRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.LegalNumGenOptsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.PartsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SNFormatRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectedSerialNumbersRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.ExtensionRow))]
    public partial class IceRow : EpicWAS.Epicor.InvTransferSvc.TempRowBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RowModField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SpecifiedPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SysRowIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.UserDefinedColumns UserDefinedColumnsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RowMod {
            get {
                return this.RowModField;
            }
            set {
                if ((object.ReferenceEquals(this.RowModField, value) != true)) {
                    this.RowModField = value;
                    this.RaisePropertyChanged("RowMod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] SpecifiedProperties {
            get {
                return this.SpecifiedPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecifiedPropertiesField, value) != true)) {
                    this.SpecifiedPropertiesField = value;
                    this.RaisePropertyChanged("SpecifiedProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SysRowID {
            get {
                return this.SysRowIDField;
            }
            set {
                if ((this.SysRowIDField.Equals(value) != true)) {
                    this.SysRowIDField = value;
                    this.RaisePropertyChanged("SysRowID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.UserDefinedColumns UserDefinedColumns {
            get {
                return this.UserDefinedColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.UserDefinedColumnsField, value) != true)) {
                    this.UserDefinedColumnsField = value;
                    this.RaisePropertyChanged("UserDefinedColumns");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvTransRow", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class InvTransRow : EpicWAS.Epicor.InvTransferSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.InvTransRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContractCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContractNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EpicorFSAField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FSAActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FSAEquipmentInstallIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FSAEquipmentPartNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FSAServiceOrderNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FSAServiceOrderResourceNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromBinDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromBinNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromLotNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FromOnHandQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromOnHandUOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromPlantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FromPlantTrackingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromWarehouseCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromWarehouseDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PCIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Plant2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SearchWordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToBinDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToBinNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToLotNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ToOnHandQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToOnHandUOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ToOrderLineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ToOrderNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ToOrderRelNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToPlantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ToPlantTrackingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToWarehouseCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToWarehouseDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TrackDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TrackLotsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TrackSerialnumbersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TrackingQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrackingUOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TranDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TranDocTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TranReferenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TransferQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransferQtyUOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarrantyCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallCode {
            get {
                return this.CallCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CallCodeField, value) != true)) {
                    this.CallCodeField = value;
                    this.RaisePropertyChanged("CallCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.InvTransRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContractCode {
            get {
                return this.ContractCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ContractCodeField, value) != true)) {
                    this.ContractCodeField = value;
                    this.RaisePropertyChanged("ContractCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContractNum {
            get {
                return this.ContractNumField;
            }
            set {
                if ((this.ContractNumField.Equals(value) != true)) {
                    this.ContractNumField = value;
                    this.RaisePropertyChanged("ContractNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EpicorFSA {
            get {
                return this.EpicorFSAField;
            }
            set {
                if ((this.EpicorFSAField.Equals(value) != true)) {
                    this.EpicorFSAField = value;
                    this.RaisePropertyChanged("EpicorFSA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FSAAction {
            get {
                return this.FSAActionField;
            }
            set {
                if ((object.ReferenceEquals(this.FSAActionField, value) != true)) {
                    this.FSAActionField = value;
                    this.RaisePropertyChanged("FSAAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FSAEquipmentInstallID {
            get {
                return this.FSAEquipmentInstallIDField;
            }
            set {
                if ((this.FSAEquipmentInstallIDField.Equals(value) != true)) {
                    this.FSAEquipmentInstallIDField = value;
                    this.RaisePropertyChanged("FSAEquipmentInstallID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FSAEquipmentPartNum {
            get {
                return this.FSAEquipmentPartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.FSAEquipmentPartNumField, value) != true)) {
                    this.FSAEquipmentPartNumField = value;
                    this.RaisePropertyChanged("FSAEquipmentPartNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FSAServiceOrderNum {
            get {
                return this.FSAServiceOrderNumField;
            }
            set {
                if ((this.FSAServiceOrderNumField.Equals(value) != true)) {
                    this.FSAServiceOrderNumField = value;
                    this.RaisePropertyChanged("FSAServiceOrderNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FSAServiceOrderResourceNum {
            get {
                return this.FSAServiceOrderResourceNumField;
            }
            set {
                if ((this.FSAServiceOrderResourceNumField.Equals(value) != true)) {
                    this.FSAServiceOrderResourceNumField = value;
                    this.RaisePropertyChanged("FSAServiceOrderResourceNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromBinDesc {
            get {
                return this.FromBinDescField;
            }
            set {
                if ((object.ReferenceEquals(this.FromBinDescField, value) != true)) {
                    this.FromBinDescField = value;
                    this.RaisePropertyChanged("FromBinDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromBinNum {
            get {
                return this.FromBinNumField;
            }
            set {
                if ((object.ReferenceEquals(this.FromBinNumField, value) != true)) {
                    this.FromBinNumField = value;
                    this.RaisePropertyChanged("FromBinNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromLotNumber {
            get {
                return this.FromLotNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.FromLotNumberField, value) != true)) {
                    this.FromLotNumberField = value;
                    this.RaisePropertyChanged("FromLotNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FromOnHandQty {
            get {
                return this.FromOnHandQtyField;
            }
            set {
                if ((this.FromOnHandQtyField.Equals(value) != true)) {
                    this.FromOnHandQtyField = value;
                    this.RaisePropertyChanged("FromOnHandQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromOnHandUOM {
            get {
                return this.FromOnHandUOMField;
            }
            set {
                if ((object.ReferenceEquals(this.FromOnHandUOMField, value) != true)) {
                    this.FromOnHandUOMField = value;
                    this.RaisePropertyChanged("FromOnHandUOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromPlant {
            get {
                return this.FromPlantField;
            }
            set {
                if ((object.ReferenceEquals(this.FromPlantField, value) != true)) {
                    this.FromPlantField = value;
                    this.RaisePropertyChanged("FromPlant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FromPlantTracking {
            get {
                return this.FromPlantTrackingField;
            }
            set {
                if ((this.FromPlantTrackingField.Equals(value) != true)) {
                    this.FromPlantTrackingField = value;
                    this.RaisePropertyChanged("FromPlantTracking");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromWarehouseCode {
            get {
                return this.FromWarehouseCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.FromWarehouseCodeField, value) != true)) {
                    this.FromWarehouseCodeField = value;
                    this.RaisePropertyChanged("FromWarehouseCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromWarehouseDesc {
            get {
                return this.FromWarehouseDescField;
            }
            set {
                if ((object.ReferenceEquals(this.FromWarehouseDescField, value) != true)) {
                    this.FromWarehouseDescField = value;
                    this.RaisePropertyChanged("FromWarehouseDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PCID {
            get {
                return this.PCIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PCIDField, value) != true)) {
                    this.PCIDField = value;
                    this.RaisePropertyChanged("PCID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartDescription {
            get {
                return this.PartDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PartDescriptionField, value) != true)) {
                    this.PartDescriptionField = value;
                    this.RaisePropertyChanged("PartDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNum {
            get {
                return this.PartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumField, value) != true)) {
                    this.PartNumField = value;
                    this.RaisePropertyChanged("PartNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Plant {
            get {
                return this.PlantField;
            }
            set {
                if ((object.ReferenceEquals(this.PlantField, value) != true)) {
                    this.PlantField = value;
                    this.RaisePropertyChanged("Plant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Plant2 {
            get {
                return this.Plant2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Plant2Field, value) != true)) {
                    this.Plant2Field = value;
                    this.RaisePropertyChanged("Plant2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SearchWord {
            get {
                return this.SearchWordField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchWordField, value) != true)) {
                    this.SearchWordField = value;
                    this.RaisePropertyChanged("SearchWord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToBinDesc {
            get {
                return this.ToBinDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ToBinDescField, value) != true)) {
                    this.ToBinDescField = value;
                    this.RaisePropertyChanged("ToBinDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToBinNum {
            get {
                return this.ToBinNumField;
            }
            set {
                if ((object.ReferenceEquals(this.ToBinNumField, value) != true)) {
                    this.ToBinNumField = value;
                    this.RaisePropertyChanged("ToBinNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToLotNumber {
            get {
                return this.ToLotNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ToLotNumberField, value) != true)) {
                    this.ToLotNumberField = value;
                    this.RaisePropertyChanged("ToLotNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ToOnHandQty {
            get {
                return this.ToOnHandQtyField;
            }
            set {
                if ((this.ToOnHandQtyField.Equals(value) != true)) {
                    this.ToOnHandQtyField = value;
                    this.RaisePropertyChanged("ToOnHandQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToOnHandUOM {
            get {
                return this.ToOnHandUOMField;
            }
            set {
                if ((object.ReferenceEquals(this.ToOnHandUOMField, value) != true)) {
                    this.ToOnHandUOMField = value;
                    this.RaisePropertyChanged("ToOnHandUOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ToOrderLine {
            get {
                return this.ToOrderLineField;
            }
            set {
                if ((this.ToOrderLineField.Equals(value) != true)) {
                    this.ToOrderLineField = value;
                    this.RaisePropertyChanged("ToOrderLine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ToOrderNum {
            get {
                return this.ToOrderNumField;
            }
            set {
                if ((this.ToOrderNumField.Equals(value) != true)) {
                    this.ToOrderNumField = value;
                    this.RaisePropertyChanged("ToOrderNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ToOrderRelNum {
            get {
                return this.ToOrderRelNumField;
            }
            set {
                if ((this.ToOrderRelNumField.Equals(value) != true)) {
                    this.ToOrderRelNumField = value;
                    this.RaisePropertyChanged("ToOrderRelNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToPlant {
            get {
                return this.ToPlantField;
            }
            set {
                if ((object.ReferenceEquals(this.ToPlantField, value) != true)) {
                    this.ToPlantField = value;
                    this.RaisePropertyChanged("ToPlant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ToPlantTracking {
            get {
                return this.ToPlantTrackingField;
            }
            set {
                if ((this.ToPlantTrackingField.Equals(value) != true)) {
                    this.ToPlantTrackingField = value;
                    this.RaisePropertyChanged("ToPlantTracking");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToWarehouseCode {
            get {
                return this.ToWarehouseCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ToWarehouseCodeField, value) != true)) {
                    this.ToWarehouseCodeField = value;
                    this.RaisePropertyChanged("ToWarehouseCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToWarehouseDesc {
            get {
                return this.ToWarehouseDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ToWarehouseDescField, value) != true)) {
                    this.ToWarehouseDescField = value;
                    this.RaisePropertyChanged("ToWarehouseDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TrackDimension {
            get {
                return this.TrackDimensionField;
            }
            set {
                if ((this.TrackDimensionField.Equals(value) != true)) {
                    this.TrackDimensionField = value;
                    this.RaisePropertyChanged("TrackDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TrackLots {
            get {
                return this.TrackLotsField;
            }
            set {
                if ((this.TrackLotsField.Equals(value) != true)) {
                    this.TrackLotsField = value;
                    this.RaisePropertyChanged("TrackLots");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TrackSerialnumbers {
            get {
                return this.TrackSerialnumbersField;
            }
            set {
                if ((this.TrackSerialnumbersField.Equals(value) != true)) {
                    this.TrackSerialnumbersField = value;
                    this.RaisePropertyChanged("TrackSerialnumbers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TrackingQty {
            get {
                return this.TrackingQtyField;
            }
            set {
                if ((this.TrackingQtyField.Equals(value) != true)) {
                    this.TrackingQtyField = value;
                    this.RaisePropertyChanged("TrackingQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrackingUOM {
            get {
                return this.TrackingUOMField;
            }
            set {
                if ((object.ReferenceEquals(this.TrackingUOMField, value) != true)) {
                    this.TrackingUOMField = value;
                    this.RaisePropertyChanged("TrackingUOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TranDate {
            get {
                return this.TranDateField;
            }
            set {
                if ((this.TranDateField.Equals(value) != true)) {
                    this.TranDateField = value;
                    this.RaisePropertyChanged("TranDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TranDocTypeID {
            get {
                return this.TranDocTypeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TranDocTypeIDField, value) != true)) {
                    this.TranDocTypeIDField = value;
                    this.RaisePropertyChanged("TranDocTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TranReference {
            get {
                return this.TranReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.TranReferenceField, value) != true)) {
                    this.TranReferenceField = value;
                    this.RaisePropertyChanged("TranReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TransferQty {
            get {
                return this.TransferQtyField;
            }
            set {
                if ((this.TransferQtyField.Equals(value) != true)) {
                    this.TransferQtyField = value;
                    this.RaisePropertyChanged("TransferQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransferQtyUOM {
            get {
                return this.TransferQtyUOMField;
            }
            set {
                if ((object.ReferenceEquals(this.TransferQtyUOMField, value) != true)) {
                    this.TransferQtyUOMField = value;
                    this.RaisePropertyChanged("TransferQtyUOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WarrantyCode {
            get {
                return this.WarrantyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.WarrantyCodeField, value) != true)) {
                    this.WarrantyCodeField = value;
                    this.RaisePropertyChanged("WarrantyCode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LegalNumGenOptsRow", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class LegalNumGenOptsRow : EpicWAS.Epicor.InvTransferSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.LegalNumGenOptsRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DocumentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DspTransYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnablePrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnableSuffixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenerationOptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenerationTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LegalNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LegalNumberIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberOptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberSuffixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeriodPrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrefixListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowDspTransYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowTransPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TranDocTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TranDocTypeID2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransYearSuffixField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.LegalNumGenOptsRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DocumentDate {
            get {
                return this.DocumentDateField;
            }
            set {
                if ((this.DocumentDateField.Equals(value) != true)) {
                    this.DocumentDateField = value;
                    this.RaisePropertyChanged("DocumentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DspTransYear {
            get {
                return this.DspTransYearField;
            }
            set {
                if ((object.ReferenceEquals(this.DspTransYearField, value) != true)) {
                    this.DspTransYearField = value;
                    this.RaisePropertyChanged("DspTransYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EnablePrefix {
            get {
                return this.EnablePrefixField;
            }
            set {
                if ((this.EnablePrefixField.Equals(value) != true)) {
                    this.EnablePrefixField = value;
                    this.RaisePropertyChanged("EnablePrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EnableSuffix {
            get {
                return this.EnableSuffixField;
            }
            set {
                if ((this.EnableSuffixField.Equals(value) != true)) {
                    this.EnableSuffixField = value;
                    this.RaisePropertyChanged("EnableSuffix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GenerationOption {
            get {
                return this.GenerationOptionField;
            }
            set {
                if ((object.ReferenceEquals(this.GenerationOptionField, value) != true)) {
                    this.GenerationOptionField = value;
                    this.RaisePropertyChanged("GenerationOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GenerationType {
            get {
                return this.GenerationTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.GenerationTypeField, value) != true)) {
                    this.GenerationTypeField = value;
                    this.RaisePropertyChanged("GenerationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LegalNumber {
            get {
                return this.LegalNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.LegalNumberField, value) != true)) {
                    this.LegalNumberField = value;
                    this.RaisePropertyChanged("LegalNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LegalNumberID {
            get {
                return this.LegalNumberIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LegalNumberIDField, value) != true)) {
                    this.LegalNumberIDField = value;
                    this.RaisePropertyChanged("LegalNumberID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberOption {
            get {
                return this.NumberOptionField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberOptionField, value) != true)) {
                    this.NumberOptionField = value;
                    this.RaisePropertyChanged("NumberOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberSuffix {
            get {
                return this.NumberSuffixField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberSuffixField, value) != true)) {
                    this.NumberSuffixField = value;
                    this.RaisePropertyChanged("NumberSuffix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PeriodPrefix {
            get {
                return this.PeriodPrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodPrefixField, value) != true)) {
                    this.PeriodPrefixField = value;
                    this.RaisePropertyChanged("PeriodPrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Prefix {
            get {
                return this.PrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.PrefixField, value) != true)) {
                    this.PrefixField = value;
                    this.RaisePropertyChanged("Prefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrefixList {
            get {
                return this.PrefixListField;
            }
            set {
                if ((object.ReferenceEquals(this.PrefixListField, value) != true)) {
                    this.PrefixListField = value;
                    this.RaisePropertyChanged("PrefixList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowDspTransYear {
            get {
                return this.ShowDspTransYearField;
            }
            set {
                if ((this.ShowDspTransYearField.Equals(value) != true)) {
                    this.ShowDspTransYearField = value;
                    this.RaisePropertyChanged("ShowDspTransYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowTransPeriod {
            get {
                return this.ShowTransPeriodField;
            }
            set {
                if ((this.ShowTransPeriodField.Equals(value) != true)) {
                    this.ShowTransPeriodField = value;
                    this.RaisePropertyChanged("ShowTransPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TranDocTypeID {
            get {
                return this.TranDocTypeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TranDocTypeIDField, value) != true)) {
                    this.TranDocTypeIDField = value;
                    this.RaisePropertyChanged("TranDocTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TranDocTypeID2 {
            get {
                return this.TranDocTypeID2Field;
            }
            set {
                if ((object.ReferenceEquals(this.TranDocTypeID2Field, value) != true)) {
                    this.TranDocTypeID2Field = value;
                    this.RaisePropertyChanged("TranDocTypeID2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransPeriod {
            get {
                return this.TransPeriodField;
            }
            set {
                if ((this.TransPeriodField.Equals(value) != true)) {
                    this.TransPeriodField = value;
                    this.RaisePropertyChanged("TransPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransYear {
            get {
                return this.TransYearField;
            }
            set {
                if ((this.TransYearField.Equals(value) != true)) {
                    this.TransYearField = value;
                    this.RaisePropertyChanged("TransYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransYearSuffix {
            get {
                return this.TransYearSuffixField;
            }
            set {
                if ((object.ReferenceEquals(this.TransYearSuffixField, value) != true)) {
                    this.TransYearSuffixField = value;
                    this.RaisePropertyChanged("TransYearSuffix");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartsRow", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class PartsRow : EpicWAS.Epicor.InvTransferSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.PartsRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.PartsRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNum {
            get {
                return this.PartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumField, value) != true)) {
                    this.PartNumField = value;
                    this.RaisePropertyChanged("PartNum");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SNFormatRow", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class SNFormatRow : EpicWAS.Epicor.InvTransferSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.SNFormatRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasSerialNumbersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LeadingZeroesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfDigitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartIUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartPartDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartPricePerCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartSalesUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PartSellingFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartTrackDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartTrackLotsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartTrackSerialNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SNBaseDataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SNFormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SNLastUsedSeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SNMaskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SNMaskPrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SNMaskSuffixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SNPrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialMaskDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialMaskExampleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialMaskMaskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SerialMaskMaskTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.SNFormatRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasSerialNumbers {
            get {
                return this.HasSerialNumbersField;
            }
            set {
                if ((this.HasSerialNumbersField.Equals(value) != true)) {
                    this.HasSerialNumbersField = value;
                    this.RaisePropertyChanged("HasSerialNumbers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LeadingZeroes {
            get {
                return this.LeadingZeroesField;
            }
            set {
                if ((this.LeadingZeroesField.Equals(value) != true)) {
                    this.LeadingZeroesField = value;
                    this.RaisePropertyChanged("LeadingZeroes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfDigits {
            get {
                return this.NumberOfDigitsField;
            }
            set {
                if ((this.NumberOfDigitsField.Equals(value) != true)) {
                    this.NumberOfDigitsField = value;
                    this.RaisePropertyChanged("NumberOfDigits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartIUM {
            get {
                return this.PartIUMField;
            }
            set {
                if ((object.ReferenceEquals(this.PartIUMField, value) != true)) {
                    this.PartIUMField = value;
                    this.RaisePropertyChanged("PartIUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNum {
            get {
                return this.PartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumField, value) != true)) {
                    this.PartNumField = value;
                    this.RaisePropertyChanged("PartNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartPartDescription {
            get {
                return this.PartPartDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PartPartDescriptionField, value) != true)) {
                    this.PartPartDescriptionField = value;
                    this.RaisePropertyChanged("PartPartDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartPricePerCode {
            get {
                return this.PartPricePerCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PartPricePerCodeField, value) != true)) {
                    this.PartPricePerCodeField = value;
                    this.RaisePropertyChanged("PartPricePerCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartSalesUM {
            get {
                return this.PartSalesUMField;
            }
            set {
                if ((object.ReferenceEquals(this.PartSalesUMField, value) != true)) {
                    this.PartSalesUMField = value;
                    this.RaisePropertyChanged("PartSalesUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PartSellingFactor {
            get {
                return this.PartSellingFactorField;
            }
            set {
                if ((this.PartSellingFactorField.Equals(value) != true)) {
                    this.PartSellingFactorField = value;
                    this.RaisePropertyChanged("PartSellingFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartTrackDimension {
            get {
                return this.PartTrackDimensionField;
            }
            set {
                if ((this.PartTrackDimensionField.Equals(value) != true)) {
                    this.PartTrackDimensionField = value;
                    this.RaisePropertyChanged("PartTrackDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartTrackLots {
            get {
                return this.PartTrackLotsField;
            }
            set {
                if ((this.PartTrackLotsField.Equals(value) != true)) {
                    this.PartTrackLotsField = value;
                    this.RaisePropertyChanged("PartTrackLots");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartTrackSerialNum {
            get {
                return this.PartTrackSerialNumField;
            }
            set {
                if ((this.PartTrackSerialNumField.Equals(value) != true)) {
                    this.PartTrackSerialNumField = value;
                    this.RaisePropertyChanged("PartTrackSerialNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Plant {
            get {
                return this.PlantField;
            }
            set {
                if ((object.ReferenceEquals(this.PlantField, value) != true)) {
                    this.PlantField = value;
                    this.RaisePropertyChanged("Plant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SNBaseDataType {
            get {
                return this.SNBaseDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SNBaseDataTypeField, value) != true)) {
                    this.SNBaseDataTypeField = value;
                    this.RaisePropertyChanged("SNBaseDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SNFormat {
            get {
                return this.SNFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.SNFormatField, value) != true)) {
                    this.SNFormatField = value;
                    this.RaisePropertyChanged("SNFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SNLastUsedSeq {
            get {
                return this.SNLastUsedSeqField;
            }
            set {
                if ((object.ReferenceEquals(this.SNLastUsedSeqField, value) != true)) {
                    this.SNLastUsedSeqField = value;
                    this.RaisePropertyChanged("SNLastUsedSeq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SNMask {
            get {
                return this.SNMaskField;
            }
            set {
                if ((object.ReferenceEquals(this.SNMaskField, value) != true)) {
                    this.SNMaskField = value;
                    this.RaisePropertyChanged("SNMask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SNMaskPrefix {
            get {
                return this.SNMaskPrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.SNMaskPrefixField, value) != true)) {
                    this.SNMaskPrefixField = value;
                    this.RaisePropertyChanged("SNMaskPrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SNMaskSuffix {
            get {
                return this.SNMaskSuffixField;
            }
            set {
                if ((object.ReferenceEquals(this.SNMaskSuffixField, value) != true)) {
                    this.SNMaskSuffixField = value;
                    this.RaisePropertyChanged("SNMaskSuffix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SNPrefix {
            get {
                return this.SNPrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.SNPrefixField, value) != true)) {
                    this.SNPrefixField = value;
                    this.RaisePropertyChanged("SNPrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialMaskDescription {
            get {
                return this.SerialMaskDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialMaskDescriptionField, value) != true)) {
                    this.SerialMaskDescriptionField = value;
                    this.RaisePropertyChanged("SerialMaskDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialMaskExample {
            get {
                return this.SerialMaskExampleField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialMaskExampleField, value) != true)) {
                    this.SerialMaskExampleField = value;
                    this.RaisePropertyChanged("SerialMaskExample");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialMaskMask {
            get {
                return this.SerialMaskMaskField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialMaskMaskField, value) != true)) {
                    this.SerialMaskMaskField = value;
                    this.RaisePropertyChanged("SerialMaskMask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SerialMaskMaskType {
            get {
                return this.SerialMaskMaskTypeField;
            }
            set {
                if ((this.SerialMaskMaskTypeField.Equals(value) != true)) {
                    this.SerialMaskMaskTypeField = value;
                    this.RaisePropertyChanged("SerialMaskMaskType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SelectedSerialNumbersRow", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class SelectedSerialNumbersRow : EpicWAS.Epicor.InvTransferSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.SelectedSerialNumbersRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeselectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int KBLbrActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KBLbrActionDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KitWhseListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NotSavedToDBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PassedInspectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PreDeselectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PreventDeselectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RawSerialNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonCodeDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonCodeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SNBaseNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SNMaskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SNPrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ScrappedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScrappedReasonCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SourceRowIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VoidedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XRefPartNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XRefPartTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string poLinkValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.SelectedSerialNumbersRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deselected {
            get {
                return this.DeselectedField;
            }
            set {
                if ((this.DeselectedField.Equals(value) != true)) {
                    this.DeselectedField = value;
                    this.RaisePropertyChanged("Deselected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int KBLbrAction {
            get {
                return this.KBLbrActionField;
            }
            set {
                if ((this.KBLbrActionField.Equals(value) != true)) {
                    this.KBLbrActionField = value;
                    this.RaisePropertyChanged("KBLbrAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KBLbrActionDesc {
            get {
                return this.KBLbrActionDescField;
            }
            set {
                if ((object.ReferenceEquals(this.KBLbrActionDescField, value) != true)) {
                    this.KBLbrActionDescField = value;
                    this.RaisePropertyChanged("KBLbrActionDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KitWhseList {
            get {
                return this.KitWhseListField;
            }
            set {
                if ((object.ReferenceEquals(this.KitWhseListField, value) != true)) {
                    this.KitWhseListField = value;
                    this.RaisePropertyChanged("KitWhseList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NotSavedToDB {
            get {
                return this.NotSavedToDBField;
            }
            set {
                if ((this.NotSavedToDBField.Equals(value) != true)) {
                    this.NotSavedToDBField = value;
                    this.RaisePropertyChanged("NotSavedToDB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNum {
            get {
                return this.PartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumField, value) != true)) {
                    this.PartNumField = value;
                    this.RaisePropertyChanged("PartNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PassedInspection {
            get {
                return this.PassedInspectionField;
            }
            set {
                if ((this.PassedInspectionField.Equals(value) != true)) {
                    this.PassedInspectionField = value;
                    this.RaisePropertyChanged("PassedInspection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PreDeselected {
            get {
                return this.PreDeselectedField;
            }
            set {
                if ((this.PreDeselectedField.Equals(value) != true)) {
                    this.PreDeselectedField = value;
                    this.RaisePropertyChanged("PreDeselected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PreventDeselect {
            get {
                return this.PreventDeselectField;
            }
            set {
                if ((this.PreventDeselectField.Equals(value) != true)) {
                    this.PreventDeselectField = value;
                    this.RaisePropertyChanged("PreventDeselect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RawSerialNum {
            get {
                return this.RawSerialNumField;
            }
            set {
                if ((object.ReferenceEquals(this.RawSerialNumField, value) != true)) {
                    this.RawSerialNumField = value;
                    this.RaisePropertyChanged("RawSerialNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReasonCodeDesc {
            get {
                return this.ReasonCodeDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonCodeDescField, value) != true)) {
                    this.ReasonCodeDescField = value;
                    this.RaisePropertyChanged("ReasonCodeDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReasonCodeType {
            get {
                return this.ReasonCodeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonCodeTypeField, value) != true)) {
                    this.ReasonCodeTypeField = value;
                    this.RaisePropertyChanged("ReasonCodeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reference {
            get {
                return this.ReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferenceField, value) != true)) {
                    this.ReferenceField = value;
                    this.RaisePropertyChanged("Reference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SNBaseNumber {
            get {
                return this.SNBaseNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SNBaseNumberField, value) != true)) {
                    this.SNBaseNumberField = value;
                    this.RaisePropertyChanged("SNBaseNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SNMask {
            get {
                return this.SNMaskField;
            }
            set {
                if ((object.ReferenceEquals(this.SNMaskField, value) != true)) {
                    this.SNMaskField = value;
                    this.RaisePropertyChanged("SNMask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SNPrefix {
            get {
                return this.SNPrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.SNPrefixField, value) != true)) {
                    this.SNPrefixField = value;
                    this.RaisePropertyChanged("SNPrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Scrapped {
            get {
                return this.ScrappedField;
            }
            set {
                if ((this.ScrappedField.Equals(value) != true)) {
                    this.ScrappedField = value;
                    this.RaisePropertyChanged("Scrapped");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScrappedReasonCode {
            get {
                return this.ScrappedReasonCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScrappedReasonCodeField, value) != true)) {
                    this.ScrappedReasonCodeField = value;
                    this.RaisePropertyChanged("ScrappedReasonCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber {
            get {
                return this.SerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                    this.SerialNumberField = value;
                    this.RaisePropertyChanged("SerialNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SourceRowID {
            get {
                return this.SourceRowIDField;
            }
            set {
                if ((this.SourceRowIDField.Equals(value) != true)) {
                    this.SourceRowIDField = value;
                    this.RaisePropertyChanged("SourceRowID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransType {
            get {
                return this.TransTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TransTypeField, value) != true)) {
                    this.TransTypeField = value;
                    this.RaisePropertyChanged("TransType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Voided {
            get {
                return this.VoidedField;
            }
            set {
                if ((this.VoidedField.Equals(value) != true)) {
                    this.VoidedField = value;
                    this.RaisePropertyChanged("Voided");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XRefPartNum {
            get {
                return this.XRefPartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.XRefPartNumField, value) != true)) {
                    this.XRefPartNumField = value;
                    this.RaisePropertyChanged("XRefPartNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XRefPartType {
            get {
                return this.XRefPartTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.XRefPartTypeField, value) != true)) {
                    this.XRefPartTypeField = value;
                    this.RaisePropertyChanged("XRefPartType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string poLinkValues {
            get {
                return this.poLinkValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.poLinkValuesField, value) != true)) {
                    this.poLinkValuesField = value;
                    this.RaisePropertyChanged("poLinkValues");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SelectSerialNumbersParamsRow", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class SelectSerialNumbersParamsRow : EpicWAS.Epicor.InvTransferSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool allowVoidedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool enableCreateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool enableRetrieveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool enableSelectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string partNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string plantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string poLinkValuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int quantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid sourceRowIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string transTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string whereClauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int xrefCustNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string xrefPartNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string xrefPartTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool allowVoided {
            get {
                return this.allowVoidedField;
            }
            set {
                if ((this.allowVoidedField.Equals(value) != true)) {
                    this.allowVoidedField = value;
                    this.RaisePropertyChanged("allowVoided");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool enableCreate {
            get {
                return this.enableCreateField;
            }
            set {
                if ((this.enableCreateField.Equals(value) != true)) {
                    this.enableCreateField = value;
                    this.RaisePropertyChanged("enableCreate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool enableRetrieve {
            get {
                return this.enableRetrieveField;
            }
            set {
                if ((this.enableRetrieveField.Equals(value) != true)) {
                    this.enableRetrieveField = value;
                    this.RaisePropertyChanged("enableRetrieve");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool enableSelect {
            get {
                return this.enableSelectField;
            }
            set {
                if ((this.enableSelectField.Equals(value) != true)) {
                    this.enableSelectField = value;
                    this.RaisePropertyChanged("enableSelect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string partNum {
            get {
                return this.partNumField;
            }
            set {
                if ((object.ReferenceEquals(this.partNumField, value) != true)) {
                    this.partNumField = value;
                    this.RaisePropertyChanged("partNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string plant {
            get {
                return this.plantField;
            }
            set {
                if ((object.ReferenceEquals(this.plantField, value) != true)) {
                    this.plantField = value;
                    this.RaisePropertyChanged("plant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string poLinkValues {
            get {
                return this.poLinkValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.poLinkValuesField, value) != true)) {
                    this.poLinkValuesField = value;
                    this.RaisePropertyChanged("poLinkValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int quantity {
            get {
                return this.quantityField;
            }
            set {
                if ((this.quantityField.Equals(value) != true)) {
                    this.quantityField = value;
                    this.RaisePropertyChanged("quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid sourceRowID {
            get {
                return this.sourceRowIDField;
            }
            set {
                if ((this.sourceRowIDField.Equals(value) != true)) {
                    this.sourceRowIDField = value;
                    this.RaisePropertyChanged("sourceRowID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string transType {
            get {
                return this.transTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.transTypeField, value) != true)) {
                    this.transTypeField = value;
                    this.RaisePropertyChanged("transType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string whereClause {
            get {
                return this.whereClauseField;
            }
            set {
                if ((object.ReferenceEquals(this.whereClauseField, value) != true)) {
                    this.whereClauseField = value;
                    this.RaisePropertyChanged("whereClause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int xrefCustNum {
            get {
                return this.xrefCustNumField;
            }
            set {
                if ((this.xrefCustNumField.Equals(value) != true)) {
                    this.xrefCustNumField = value;
                    this.RaisePropertyChanged("xrefCustNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xrefPartNum {
            get {
                return this.xrefPartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.xrefPartNumField, value) != true)) {
                    this.xrefPartNumField = value;
                    this.RaisePropertyChanged("xrefPartNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xrefPartType {
            get {
                return this.xrefPartTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.xrefPartTypeField, value) != true)) {
                    this.xrefPartTypeField = value;
                    this.RaisePropertyChanged("xrefPartType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="UserDefinedColumns", Namespace="http://epicor.com/UserDefinedColumns", ItemName="Column", KeyName="Name", ValueName="Value")]
    [System.SerializableAttribute()]
    public class UserDefinedColumns : System.Collections.Generic.Dictionary<string, object> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
    [System.SerializableAttribute()]
    public partial class EpicorFaultDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.EpicorExceptionData[] DataListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionKindValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail InnerFaultDetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_exKindQualifiedNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_exceptionQualifiedNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.EpicorExceptionData[] DataList {
            get {
                return this.DataListField;
            }
            set {
                if ((object.ReferenceEquals(this.DataListField, value) != true)) {
                    this.DataListField = value;
                    this.RaisePropertyChanged("DataList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExceptionKindValue {
            get {
                return this.ExceptionKindValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionKindValueField, value) != true)) {
                    this.ExceptionKindValueField = value;
                    this.RaisePropertyChanged("ExceptionKindValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail InnerFaultDetail {
            get {
                return this.InnerFaultDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.InnerFaultDetailField, value) != true)) {
                    this.InnerFaultDetailField = value;
                    this.RaisePropertyChanged("InnerFaultDetail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_exKindQualifiedName {
            get {
                return this.m_exKindQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.m_exKindQualifiedNameField, value) != true)) {
                    this.m_exKindQualifiedNameField = value;
                    this.RaisePropertyChanged("m_exKindQualifiedName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_exceptionQualifiedName {
            get {
                return this.m_exceptionQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.m_exceptionQualifiedNameField, value) != true)) {
                    this.m_exceptionQualifiedNameField = value;
                    this.RaisePropertyChanged("m_exceptionQualifiedName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EpicorExceptionData", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
    [System.SerializableAttribute()]
    public partial class EpicorExceptionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int m_ColumnNumberField;
        
        private int m_LineNumberField;
        
        private string m_MessageField;
        
        private string[] m_MessageDetailsField;
        
        private string m_MethodField;
        
        private string m_ProgramField;
        
        private System.Collections.Generic.Dictionary<string, string> m_PropertiesField;
        
        private string m_TraceStackField;
        
        private System.Collections.Generic.Dictionary<string, string> m_UserPropertiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_ColumnNumber {
            get {
                return this.m_ColumnNumberField;
            }
            set {
                if ((this.m_ColumnNumberField.Equals(value) != true)) {
                    this.m_ColumnNumberField = value;
                    this.RaisePropertyChanged("m_ColumnNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_LineNumber {
            get {
                return this.m_LineNumberField;
            }
            set {
                if ((this.m_LineNumberField.Equals(value) != true)) {
                    this.m_LineNumberField = value;
                    this.RaisePropertyChanged("m_LineNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Message {
            get {
                return this.m_MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MessageField, value) != true)) {
                    this.m_MessageField = value;
                    this.RaisePropertyChanged("m_Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] m_MessageDetails {
            get {
                return this.m_MessageDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MessageDetailsField, value) != true)) {
                    this.m_MessageDetailsField = value;
                    this.RaisePropertyChanged("m_MessageDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Method {
            get {
                return this.m_MethodField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MethodField, value) != true)) {
                    this.m_MethodField = value;
                    this.RaisePropertyChanged("m_Method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Program {
            get {
                return this.m_ProgramField;
            }
            set {
                if ((object.ReferenceEquals(this.m_ProgramField, value) != true)) {
                    this.m_ProgramField = value;
                    this.RaisePropertyChanged("m_Program");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> m_Properties {
            get {
                return this.m_PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.m_PropertiesField, value) != true)) {
                    this.m_PropertiesField = value;
                    this.RaisePropertyChanged("m_Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_TraceStack {
            get {
                return this.m_TraceStackField;
            }
            set {
                if ((object.ReferenceEquals(this.m_TraceStackField, value) != true)) {
                    this.m_TraceStackField = value;
                    this.RaisePropertyChanged("m_TraceStack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> m_UserProperties {
            get {
                return this.m_UserPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.m_UserPropertiesField, value) != true)) {
                    this.m_UserPropertiesField = value;
                    this.RaisePropertyChanged("m_UserProperties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvTransRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    public enum InvTransRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TranDate = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FromWarehouseCode = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FromWarehouseDesc = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToWarehouseCode = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToWarehouseDesc = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FromBinNum = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FromBinDesc = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToBinNum = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToBinDesc = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FromLotNumber = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToLotNumber = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FromOnHandQty = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToOnHandQty = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Plant = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Plant2 = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNum = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TrackDimension = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TrackSerialnumbers = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TrackLots = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartDescription = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SearchWord = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TranReference = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FromPlant = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FromPlantTracking = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToPlant = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToPlantTracking = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FromOnHandUOM = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransferQty = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransferQtyUOM = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToOnHandUOM = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TrackingUOM = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TrackingQty = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TranDocTypeID = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToOrderNum = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToOrderLine = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToOrderRelNum = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PCID = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FSAAction = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EpicorFSA = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CallCode = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ContractCode = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WarrantyCode = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ContractNum = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FSAEquipmentPartNum = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FSAEquipmentInstallID = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FSAServiceOrderNum = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FSAServiceOrderResourceNum = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 50,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LegalNumGenOptsRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    public enum LegalNumGenOptsRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LegalNumberID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransYear = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransYearSuffix = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DspTransYear = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ShowDspTransYear = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Prefix = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrefixList = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NumberSuffix = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EnablePrefix = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EnableSuffix = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NumberOption = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DocumentDate = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GenerationType = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Description = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransPeriod = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PeriodPrefix = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ShowTransPeriod = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LegalNumber = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TranDocTypeID = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TranDocTypeID2 = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GenerationOption = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 24,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartsRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    public enum PartsRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNum = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SNFormatRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    public enum SNFormatRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Plant = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNum = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NumberOfDigits = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SNMask = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SNBaseDataType = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SNFormat = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LeadingZeroes = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SNPrefix = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SNMaskSuffix = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SNMaskPrefix = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SNLastUsedSeq = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HasSerialNumbers = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartPricePerCode = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartTrackLots = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartTrackSerialNum = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartTrackDimension = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartSalesUM = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartIUM = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartSellingFactor = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartPartDescription = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialMaskMaskType = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialMaskMask = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialMaskExample = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialMaskDescription = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 28,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SelectedSerialNumbersRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    public enum SelectedSerialNumbersRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialNumber = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scrapped = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScrappedReasonCode = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Voided = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Reference = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReasonCodeType = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReasonCodeDesc = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNum = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SNPrefix = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SNBaseNumber = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SourceRowID = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransType = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PassedInspection = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deselected = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KitWhseList = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RawSerialNum = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KBLbrAction = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KBLbrActionDesc = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PreventDeselect = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XRefPartNum = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XRefPartType = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PreDeselected = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        poLinkValues = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SNMask = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotSavedToDB = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 28,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SelectSerialNumbersParamsTable", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets", ItemName="SelectSerialNumbersParamsRow")]
    [System.SerializableAttribute()]
    public class SelectSerialNumbersParamsTable : System.Collections.Generic.List<EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsRow> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SelectSerialNumbersParamsRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    public enum SelectSerialNumbersParamsRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        partNum = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        quantity = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        whereClause = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        transType = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        sourceRowID = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        enableCreate = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        enableSelect = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        enableRetrieve = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        allowVoided = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        plant = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        xrefPartNum = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        xrefPartType = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        xrefCustNum = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        poLinkValues = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 16,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Erp:BO:InvTransfer", ConfigurationName="Epicor.InvTransferSvc.InvTransferSvcContract")]
    public interface InvTransferSvcContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeFromBin", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeFromBinResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeFromBinEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.ChangeFromBinResponse ChangeFromBin(EpicWAS.Epicor.InvTransferSvc.ChangeFromBinRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeFromBin", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeFromBinResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeFromBinResponse> ChangeFromBinAsync(EpicWAS.Epicor.InvTransferSvc.ChangeFromBinRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeFromWhse", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeFromWhseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeFromWhseEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.ChangeFromWhseResponse ChangeFromWhse(EpicWAS.Epicor.InvTransferSvc.ChangeFromWhseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeFromWhse", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeFromWhseResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeFromWhseResponse> ChangeFromWhseAsync(EpicWAS.Epicor.InvTransferSvc.ChangeFromWhseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeLot", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeLotResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeLotEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.ChangeLotResponse ChangeLot(EpicWAS.Epicor.InvTransferSvc.ChangeLotRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeLot", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeLotResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeLotResponse> ChangeLotAsync(EpicWAS.Epicor.InvTransferSvc.ChangeLotRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeToBin", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeToBinResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeToBinEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.ChangeToBinResponse ChangeToBin(EpicWAS.Epicor.InvTransferSvc.ChangeToBinRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeToBin", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeToBinResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeToBinResponse> ChangeToBinAsync(EpicWAS.Epicor.InvTransferSvc.ChangeToBinRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeToWhse", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeToWhseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeToWhseEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.ChangeToWhseResponse ChangeToWhse(EpicWAS.Epicor.InvTransferSvc.ChangeToWhseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeToWhse", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeToWhseResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeToWhseResponse> ChangeToWhseAsync(EpicWAS.Epicor.InvTransferSvc.ChangeToWhseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeUOM", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeUOMResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeUOMEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.ChangeUOMResponse ChangeUOM(EpicWAS.Epicor.InvTransferSvc.ChangeUOMRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeUOM", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ChangeUOMResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeUOMResponse> ChangeUOMAsync(EpicWAS.Epicor.InvTransferSvc.ChangeUOMRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/CommitTransfer", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/CommitTransferResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/CommitTransferEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.CommitTransferResponse CommitTransfer(EpicWAS.Epicor.InvTransferSvc.CommitTransferRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/CommitTransfer", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/CommitTransferResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.CommitTransferResponse> CommitTransferAsync(EpicWAS.Epicor.InvTransferSvc.CommitTransferRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetAvailBins", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetAvailBinsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetAvailBinsEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="BinList")]
        string GetAvailBins(string PartNum, string AllBins, string WarehouseCode, string LotNum, string DimCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetAvailBins", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetAvailBinsResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="BinList")]
        System.Threading.Tasks.Task<string> GetAvailBinsAsync(string PartNum, string AllBins, string WarehouseCode, string LotNum, string DimCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetPartXRefInfo", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetPartXRefInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetPartXRefInfoEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.GetPartXRefInfoResponse GetPartXRefInfo(EpicWAS.Epicor.InvTransferSvc.GetPartXRefInfoRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetPartXRefInfo", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetPartXRefInfoResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.GetPartXRefInfoResponse> GetPartXRefInfoAsync(EpicWAS.Epicor.InvTransferSvc.GetPartXRefInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetPrimaryBin", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetPrimaryBinResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetPrimaryBinEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.GetPrimaryBinResponse GetPrimaryBin(EpicWAS.Epicor.InvTransferSvc.GetPrimaryBinRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetPrimaryBin", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetPrimaryBinResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.GetPrimaryBinResponse> GetPrimaryBinAsync(EpicWAS.Epicor.InvTransferSvc.GetPrimaryBinRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetSelectSerialNumbersParams", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetSelectSerialNumbersParamsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetSelectSerialNumbersParamsEpicorFault" +
            "DetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.GetSelectSerialNumbersParamsResponse GetSelectSerialNumbersParams(EpicWAS.Epicor.InvTransferSvc.GetSelectSerialNumbersParamsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetSelectSerialNumbersParams", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetSelectSerialNumbersParamsResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.GetSelectSerialNumbersParamsResponse> GetSelectSerialNumbersParamsAsync(EpicWAS.Epicor.InvTransferSvc.GetSelectSerialNumbersParamsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetTransferRecord", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetTransferRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetTransferRecordEpicorFaultDetailFault" +
            "", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.InvTransferTableset GetTransferRecord(string iPartNum, string uomCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetTransferRecord", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetTransferRecordResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.InvTransferTableset> GetTransferRecordAsync(string iPartNum, string uomCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/PreCommitTransfer", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/PreCommitTransferResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/PreCommitTransferEpicorFaultDetailFault" +
            "", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.PreCommitTransferResponse PreCommitTransfer(EpicWAS.Epicor.InvTransferSvc.PreCommitTransferRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/PreCommitTransfer", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/PreCommitTransferResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.PreCommitTransferResponse> PreCommitTransferAsync(EpicWAS.Epicor.InvTransferSvc.PreCommitTransferRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ValidateSN", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ValidateSNResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/ValidateSNEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.ValidateSNResponse ValidateSN(EpicWAS.Epicor.InvTransferSvc.ValidateSNRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/ValidateSN", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/ValidateSNResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ValidateSNResponse> ValidateSNAsync(EpicWAS.Epicor.InvTransferSvc.ValidateSNRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/AreSNumsAllocated", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/AreSNumsAllocatedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/AreSNumsAllocatedEpicorFaultDetailFault" +
            "", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        bool AreSNumsAllocated(string ipPartNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/AreSNumsAllocated", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/AreSNumsAllocatedResponse")]
        System.Threading.Tasks.Task<bool> AreSNumsAllocatedAsync(string ipPartNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetAvailTranDocTypes", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetAvailTranDocTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetAvailTranDocTypesEpicorFaultDetailFa" +
            "ult", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="listAvailTranDocTypes")]
        string GetAvailTranDocTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetAvailTranDocTypes", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetAvailTranDocTypesResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="listAvailTranDocTypes")]
        System.Threading.Tasks.Task<string> GetAvailTranDocTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/NegativeInventoryTest", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/NegativeInventoryTestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/NegativeInventoryTestEpicorFaultDetailF" +
            "ault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.NegativeInventoryTestResponse NegativeInventoryTest(EpicWAS.Epicor.InvTransferSvc.NegativeInventoryTestRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/NegativeInventoryTest", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/NegativeInventoryTestResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.NegativeInventoryTestResponse> NegativeInventoryTestAsync(EpicWAS.Epicor.InvTransferSvc.NegativeInventoryTestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/MasterInventoryBinTests", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/MasterInventoryBinTestsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/MasterInventoryBinTestsEpicorFaultDetai" +
            "lFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.MasterInventoryBinTestsResponse MasterInventoryBinTests(EpicWAS.Epicor.InvTransferSvc.MasterInventoryBinTestsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/MasterInventoryBinTests", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/MasterInventoryBinTestsResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.MasterInventoryBinTestsResponse> MasterInventoryBinTestsAsync(EpicWAS.Epicor.InvTransferSvc.MasterInventoryBinTestsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetPartFromRowID", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetPartFromRowIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.InvTransferSvc.EpicorFaultDetail), Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetPartFromRowIDEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.InvTransferSvc.GetPartFromRowIDResponse GetPartFromRowID(EpicWAS.Epicor.InvTransferSvc.GetPartFromRowIDRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:InvTransfer/InvTransferSvcContract/GetPartFromRowID", ReplyAction="Erp:BO:InvTransfer/InvTransferSvcContract/GetPartFromRowIDResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.GetPartFromRowIDResponse> GetPartFromRowIDAsync(EpicWAS.Epicor.InvTransferSvc.GetPartFromRowIDRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeFromBin", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeFromBinRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeFromBinRequest() {
        }
        
        public ChangeFromBinRequest(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeFromBinResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeFromBinResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeFromBinResponse() {
        }
        
        public ChangeFromBinResponse(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeFromWhse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeFromWhseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeFromWhseRequest() {
        }
        
        public ChangeFromWhseRequest(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeFromWhseResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeFromWhseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeFromWhseResponse() {
        }
        
        public ChangeFromWhseResponse(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeLot", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeLotRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeLotRequest() {
        }
        
        public ChangeLotRequest(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeLotResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeLotResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeLotResponse() {
        }
        
        public ChangeLotResponse(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeToBin", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeToBinRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeToBinRequest() {
        }
        
        public ChangeToBinRequest(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeToBinResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeToBinResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeToBinResponse() {
        }
        
        public ChangeToBinResponse(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeToWhse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeToWhseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeToWhseRequest() {
        }
        
        public ChangeToWhseRequest(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeToWhseResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeToWhseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeToWhseResponse() {
        }
        
        public ChangeToWhseResponse(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeUOM", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeUOMRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeUOMRequest() {
        }
        
        public ChangeUOMRequest(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeUOMResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ChangeUOMResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public ChangeUOMResponse() {
        }
        
        public ChangeUOMResponse(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CommitTransfer", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class CommitTransferRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public CommitTransferRequest() {
        }
        
        public CommitTransferRequest(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CommitTransferResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class CommitTransferResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public string LegalNumberMessage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=2)]
        public string partTranPKs;
        
        public CommitTransferResponse() {
        }
        
        public CommitTransferResponse(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds, string LegalNumberMessage, string partTranPKs) {
            this.ds = ds;
            this.LegalNumberMessage = LegalNumberMessage;
            this.partTranPKs = partTranPKs;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPartXRefInfo", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class GetPartXRefInfoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public string uomCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=2)]
        public System.Guid SysRowID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=3)]
        public string rowType;
        
        public GetPartXRefInfoRequest() {
        }
        
        public GetPartXRefInfoRequest(string partNum, string uomCode, System.Guid SysRowID, string rowType) {
            this.partNum = partNum;
            this.uomCode = uomCode;
            this.SysRowID = SysRowID;
            this.rowType = rowType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPartXRefInfoResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class GetPartXRefInfoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public string uomCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=2)]
        public string serialWarning;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=3)]
        public string questionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=4)]
        public bool multipleMatch;
        
        public GetPartXRefInfoResponse() {
        }
        
        public GetPartXRefInfoResponse(string partNum, string uomCode, string serialWarning, string questionString, bool multipleMatch) {
            this.partNum = partNum;
            this.uomCode = uomCode;
            this.serialWarning = serialWarning;
            this.questionString = questionString;
            this.multipleMatch = multipleMatch;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPrimaryBin", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class GetPrimaryBinRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public string iPartNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public string iWarehouseCode;
        
        public GetPrimaryBinRequest() {
        }
        
        public GetPrimaryBinRequest(string iPartNum, string iWarehouseCode) {
            this.iPartNum = iPartNum;
            this.iWarehouseCode = iWarehouseCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPrimaryBinResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class GetPrimaryBinResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public string GetPrimaryBinResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public string PrimaryBin;
        
        public GetPrimaryBinResponse() {
        }
        
        public GetPrimaryBinResponse(string GetPrimaryBinResult, string PrimaryBin) {
            this.GetPrimaryBinResult = GetPrimaryBinResult;
            this.PrimaryBin = PrimaryBin;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSelectSerialNumbersParams", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class GetSelectSerialNumbersParamsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public GetSelectSerialNumbersParamsRequest() {
        }
        
        public GetSelectSerialNumbersParamsRequest(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSelectSerialNumbersParamsResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class GetSelectSerialNumbersParamsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsTableset GetSelectSerialNumbersParamsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public GetSelectSerialNumbersParamsResponse() {
        }
        
        public GetSelectSerialNumbersParamsResponse(EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsTableset GetSelectSerialNumbersParamsResult, EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.GetSelectSerialNumbersParamsResult = GetSelectSerialNumbersParamsResult;
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PreCommitTransfer", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class PreCommitTransferRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public PreCommitTransferRequest() {
        }
        
        public PreCommitTransferRequest(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PreCommitTransferResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class PreCommitTransferResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public bool RequiresUserInput;
        
        public PreCommitTransferResponse() {
        }
        
        public PreCommitTransferResponse(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds, bool RequiresUserInput) {
            this.ds = ds;
            this.RequiresUserInput = RequiresUserInput;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateSN", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ValidateSNRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public string serialNumber;
        
        public ValidateSNRequest() {
        }
        
        public ValidateSNRequest(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds, string serialNumber) {
            this.ds = ds;
            this.serialNumber = serialNumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateSNResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class ValidateSNResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public bool isVoided;
        
        public ValidateSNResponse() {
        }
        
        public ValidateSNResponse(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds, bool isVoided) {
            this.ds = ds;
            this.isVoided = isVoided;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="NegativeInventoryTest", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class NegativeInventoryTestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public string pcPartNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public string pcWhseCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=2)]
        public string pcBinNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=3)]
        public string pcLotNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=4)]
        public string pcPCID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=5)]
        public string pcUOMCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=6)]
        public decimal pdTranQty;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=7)]
        public decimal pdDimConvFactor;
        
        public NegativeInventoryTestRequest() {
        }
        
        public NegativeInventoryTestRequest(string pcPartNum, string pcWhseCode, string pcBinNum, string pcLotNum, string pcPCID, string pcUOMCode, decimal pdTranQty, decimal pdDimConvFactor) {
            this.pcPartNum = pcPartNum;
            this.pcWhseCode = pcWhseCode;
            this.pcBinNum = pcBinNum;
            this.pcLotNum = pcLotNum;
            this.pcPCID = pcPCID;
            this.pcUOMCode = pcUOMCode;
            this.pdTranQty = pdTranQty;
            this.pdDimConvFactor = pdDimConvFactor;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="NegativeInventoryTestResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class NegativeInventoryTestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public string pcNeqQtyAction;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public string pcMessage;
        
        public NegativeInventoryTestResponse() {
        }
        
        public NegativeInventoryTestResponse(string pcNeqQtyAction, string pcMessage) {
            this.pcNeqQtyAction = pcNeqQtyAction;
            this.pcMessage = pcMessage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MasterInventoryBinTests", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class MasterInventoryBinTestsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        public MasterInventoryBinTestsRequest() {
        }
        
        public MasterInventoryBinTestsRequest(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MasterInventoryBinTestsResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class MasterInventoryBinTestsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public string pcNeqQtyAction;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=2)]
        public string pcNeqQtyMessage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=3)]
        public string pcFromPCBinAction;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=4)]
        public string pcFromPCBinMessage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=5)]
        public string pcToPCBinAction;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=6)]
        public string pcToPCBinMessage;
        
        public MasterInventoryBinTestsResponse() {
        }
        
        public MasterInventoryBinTestsResponse(EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds, string pcNeqQtyAction, string pcNeqQtyMessage, string pcFromPCBinAction, string pcFromPCBinMessage, string pcToPCBinAction, string pcToPCBinMessage) {
            this.ds = ds;
            this.pcNeqQtyAction = pcNeqQtyAction;
            this.pcNeqQtyMessage = pcNeqQtyMessage;
            this.pcFromPCBinAction = pcFromPCBinAction;
            this.pcFromPCBinMessage = pcFromPCBinMessage;
            this.pcToPCBinAction = pcToPCBinAction;
            this.pcToPCBinMessage = pcToPCBinMessage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPartFromRowID", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class GetPartFromRowIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public string ipRowType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public System.Guid ipRowID;
        
        public GetPartFromRowIDRequest() {
        }
        
        public GetPartFromRowIDRequest(string ipRowType, System.Guid ipRowID) {
            this.ipRowType = ipRowType;
            this.ipRowID = ipRowID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPartFromRowIDResponse", WrapperNamespace="Erp:BO:InvTransfer", IsWrapped=true)]
    public partial class GetPartFromRowIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=0)]
        public string opPartNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:InvTransfer", Order=1)]
        public string opUOM;
        
        public GetPartFromRowIDResponse() {
        }
        
        public GetPartFromRowIDResponse(string opPartNum, string opUOM) {
            this.opPartNum = opPartNum;
            this.opUOM = opUOM;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface InvTransferSvcContractChannel : EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InvTransferSvcContractClient : System.ServiceModel.ClientBase<EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract>, EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract {
        
        public InvTransferSvcContractClient() {
        }
        
        public InvTransferSvcContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InvTransferSvcContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InvTransferSvcContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InvTransferSvcContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.ChangeFromBinResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.ChangeFromBin(EpicWAS.Epicor.InvTransferSvc.ChangeFromBinRequest request) {
            return base.Channel.ChangeFromBin(request);
        }
        
        public void ChangeFromBin(ref EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            EpicWAS.Epicor.InvTransferSvc.ChangeFromBinRequest inValue = new EpicWAS.Epicor.InvTransferSvc.ChangeFromBinRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.InvTransferSvc.ChangeFromBinResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).ChangeFromBin(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeFromBinResponse> ChangeFromBinAsync(EpicWAS.Epicor.InvTransferSvc.ChangeFromBinRequest request) {
            return base.Channel.ChangeFromBinAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.ChangeFromWhseResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.ChangeFromWhse(EpicWAS.Epicor.InvTransferSvc.ChangeFromWhseRequest request) {
            return base.Channel.ChangeFromWhse(request);
        }
        
        public void ChangeFromWhse(ref EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            EpicWAS.Epicor.InvTransferSvc.ChangeFromWhseRequest inValue = new EpicWAS.Epicor.InvTransferSvc.ChangeFromWhseRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.InvTransferSvc.ChangeFromWhseResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).ChangeFromWhse(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeFromWhseResponse> ChangeFromWhseAsync(EpicWAS.Epicor.InvTransferSvc.ChangeFromWhseRequest request) {
            return base.Channel.ChangeFromWhseAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.ChangeLotResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.ChangeLot(EpicWAS.Epicor.InvTransferSvc.ChangeLotRequest request) {
            return base.Channel.ChangeLot(request);
        }
        
        public void ChangeLot(ref EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            EpicWAS.Epicor.InvTransferSvc.ChangeLotRequest inValue = new EpicWAS.Epicor.InvTransferSvc.ChangeLotRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.InvTransferSvc.ChangeLotResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).ChangeLot(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeLotResponse> ChangeLotAsync(EpicWAS.Epicor.InvTransferSvc.ChangeLotRequest request) {
            return base.Channel.ChangeLotAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.ChangeToBinResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.ChangeToBin(EpicWAS.Epicor.InvTransferSvc.ChangeToBinRequest request) {
            return base.Channel.ChangeToBin(request);
        }
        
        public void ChangeToBin(ref EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            EpicWAS.Epicor.InvTransferSvc.ChangeToBinRequest inValue = new EpicWAS.Epicor.InvTransferSvc.ChangeToBinRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.InvTransferSvc.ChangeToBinResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).ChangeToBin(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeToBinResponse> ChangeToBinAsync(EpicWAS.Epicor.InvTransferSvc.ChangeToBinRequest request) {
            return base.Channel.ChangeToBinAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.ChangeToWhseResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.ChangeToWhse(EpicWAS.Epicor.InvTransferSvc.ChangeToWhseRequest request) {
            return base.Channel.ChangeToWhse(request);
        }
        
        public void ChangeToWhse(ref EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            EpicWAS.Epicor.InvTransferSvc.ChangeToWhseRequest inValue = new EpicWAS.Epicor.InvTransferSvc.ChangeToWhseRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.InvTransferSvc.ChangeToWhseResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).ChangeToWhse(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeToWhseResponse> ChangeToWhseAsync(EpicWAS.Epicor.InvTransferSvc.ChangeToWhseRequest request) {
            return base.Channel.ChangeToWhseAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.ChangeUOMResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.ChangeUOM(EpicWAS.Epicor.InvTransferSvc.ChangeUOMRequest request) {
            return base.Channel.ChangeUOM(request);
        }
        
        public void ChangeUOM(ref EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            EpicWAS.Epicor.InvTransferSvc.ChangeUOMRequest inValue = new EpicWAS.Epicor.InvTransferSvc.ChangeUOMRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.InvTransferSvc.ChangeUOMResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).ChangeUOM(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ChangeUOMResponse> ChangeUOMAsync(EpicWAS.Epicor.InvTransferSvc.ChangeUOMRequest request) {
            return base.Channel.ChangeUOMAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.CommitTransferResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.CommitTransfer(EpicWAS.Epicor.InvTransferSvc.CommitTransferRequest request) {
            return base.Channel.CommitTransfer(request);
        }
        
        public string CommitTransfer(ref EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds, out string partTranPKs) {
            EpicWAS.Epicor.InvTransferSvc.CommitTransferRequest inValue = new EpicWAS.Epicor.InvTransferSvc.CommitTransferRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.InvTransferSvc.CommitTransferResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).CommitTransfer(inValue);
            ds = retVal.ds;
            partTranPKs = retVal.partTranPKs;
            return retVal.LegalNumberMessage;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.CommitTransferResponse> CommitTransferAsync(EpicWAS.Epicor.InvTransferSvc.CommitTransferRequest request) {
            return base.Channel.CommitTransferAsync(request);
        }
        
        public string GetAvailBins(string PartNum, string AllBins, string WarehouseCode, string LotNum, string DimCode) {
            return base.Channel.GetAvailBins(PartNum, AllBins, WarehouseCode, LotNum, DimCode);
        }
        
        public System.Threading.Tasks.Task<string> GetAvailBinsAsync(string PartNum, string AllBins, string WarehouseCode, string LotNum, string DimCode) {
            return base.Channel.GetAvailBinsAsync(PartNum, AllBins, WarehouseCode, LotNum, DimCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.GetPartXRefInfoResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.GetPartXRefInfo(EpicWAS.Epicor.InvTransferSvc.GetPartXRefInfoRequest request) {
            return base.Channel.GetPartXRefInfo(request);
        }
        
        public string GetPartXRefInfo(ref string partNum, ref string uomCode, System.Guid SysRowID, string rowType, out string questionString, out bool multipleMatch) {
            EpicWAS.Epicor.InvTransferSvc.GetPartXRefInfoRequest inValue = new EpicWAS.Epicor.InvTransferSvc.GetPartXRefInfoRequest();
            inValue.partNum = partNum;
            inValue.uomCode = uomCode;
            inValue.SysRowID = SysRowID;
            inValue.rowType = rowType;
            EpicWAS.Epicor.InvTransferSvc.GetPartXRefInfoResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).GetPartXRefInfo(inValue);
            partNum = retVal.partNum;
            uomCode = retVal.uomCode;
            questionString = retVal.questionString;
            multipleMatch = retVal.multipleMatch;
            return retVal.serialWarning;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.GetPartXRefInfoResponse> GetPartXRefInfoAsync(EpicWAS.Epicor.InvTransferSvc.GetPartXRefInfoRequest request) {
            return base.Channel.GetPartXRefInfoAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.GetPrimaryBinResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.GetPrimaryBin(EpicWAS.Epicor.InvTransferSvc.GetPrimaryBinRequest request) {
            return base.Channel.GetPrimaryBin(request);
        }
        
        public string GetPrimaryBin(string iPartNum, string iWarehouseCode, out string PrimaryBin) {
            EpicWAS.Epicor.InvTransferSvc.GetPrimaryBinRequest inValue = new EpicWAS.Epicor.InvTransferSvc.GetPrimaryBinRequest();
            inValue.iPartNum = iPartNum;
            inValue.iWarehouseCode = iWarehouseCode;
            EpicWAS.Epicor.InvTransferSvc.GetPrimaryBinResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).GetPrimaryBin(inValue);
            PrimaryBin = retVal.PrimaryBin;
            return retVal.GetPrimaryBinResult;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.GetPrimaryBinResponse> GetPrimaryBinAsync(EpicWAS.Epicor.InvTransferSvc.GetPrimaryBinRequest request) {
            return base.Channel.GetPrimaryBinAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.GetSelectSerialNumbersParamsResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.GetSelectSerialNumbersParams(EpicWAS.Epicor.InvTransferSvc.GetSelectSerialNumbersParamsRequest request) {
            return base.Channel.GetSelectSerialNumbersParams(request);
        }
        
        public EpicWAS.Epicor.InvTransferSvc.SelectSerialNumbersParamsTableset GetSelectSerialNumbersParams(ref EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            EpicWAS.Epicor.InvTransferSvc.GetSelectSerialNumbersParamsRequest inValue = new EpicWAS.Epicor.InvTransferSvc.GetSelectSerialNumbersParamsRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.InvTransferSvc.GetSelectSerialNumbersParamsResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).GetSelectSerialNumbersParams(inValue);
            ds = retVal.ds;
            return retVal.GetSelectSerialNumbersParamsResult;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.GetSelectSerialNumbersParamsResponse> GetSelectSerialNumbersParamsAsync(EpicWAS.Epicor.InvTransferSvc.GetSelectSerialNumbersParamsRequest request) {
            return base.Channel.GetSelectSerialNumbersParamsAsync(request);
        }
        
        public EpicWAS.Epicor.InvTransferSvc.InvTransferTableset GetTransferRecord(string iPartNum, string uomCode) {
            return base.Channel.GetTransferRecord(iPartNum, uomCode);
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.InvTransferTableset> GetTransferRecordAsync(string iPartNum, string uomCode) {
            return base.Channel.GetTransferRecordAsync(iPartNum, uomCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.PreCommitTransferResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.PreCommitTransfer(EpicWAS.Epicor.InvTransferSvc.PreCommitTransferRequest request) {
            return base.Channel.PreCommitTransfer(request);
        }
        
        public bool PreCommitTransfer(ref EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds) {
            EpicWAS.Epicor.InvTransferSvc.PreCommitTransferRequest inValue = new EpicWAS.Epicor.InvTransferSvc.PreCommitTransferRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.InvTransferSvc.PreCommitTransferResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).PreCommitTransfer(inValue);
            ds = retVal.ds;
            return retVal.RequiresUserInput;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.PreCommitTransferResponse> PreCommitTransferAsync(EpicWAS.Epicor.InvTransferSvc.PreCommitTransferRequest request) {
            return base.Channel.PreCommitTransferAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.ValidateSNResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.ValidateSN(EpicWAS.Epicor.InvTransferSvc.ValidateSNRequest request) {
            return base.Channel.ValidateSN(request);
        }
        
        public bool ValidateSN(ref EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds, string serialNumber) {
            EpicWAS.Epicor.InvTransferSvc.ValidateSNRequest inValue = new EpicWAS.Epicor.InvTransferSvc.ValidateSNRequest();
            inValue.ds = ds;
            inValue.serialNumber = serialNumber;
            EpicWAS.Epicor.InvTransferSvc.ValidateSNResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).ValidateSN(inValue);
            ds = retVal.ds;
            return retVal.isVoided;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.ValidateSNResponse> ValidateSNAsync(EpicWAS.Epicor.InvTransferSvc.ValidateSNRequest request) {
            return base.Channel.ValidateSNAsync(request);
        }
        
        public bool AreSNumsAllocated(string ipPartNum) {
            return base.Channel.AreSNumsAllocated(ipPartNum);
        }
        
        public System.Threading.Tasks.Task<bool> AreSNumsAllocatedAsync(string ipPartNum) {
            return base.Channel.AreSNumsAllocatedAsync(ipPartNum);
        }
        
        public string GetAvailTranDocTypes() {
            return base.Channel.GetAvailTranDocTypes();
        }
        
        public System.Threading.Tasks.Task<string> GetAvailTranDocTypesAsync() {
            return base.Channel.GetAvailTranDocTypesAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.NegativeInventoryTestResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.NegativeInventoryTest(EpicWAS.Epicor.InvTransferSvc.NegativeInventoryTestRequest request) {
            return base.Channel.NegativeInventoryTest(request);
        }
        
        public string NegativeInventoryTest(string pcPartNum, string pcWhseCode, string pcBinNum, string pcLotNum, string pcPCID, string pcUOMCode, decimal pdTranQty, decimal pdDimConvFactor, out string pcMessage) {
            EpicWAS.Epicor.InvTransferSvc.NegativeInventoryTestRequest inValue = new EpicWAS.Epicor.InvTransferSvc.NegativeInventoryTestRequest();
            inValue.pcPartNum = pcPartNum;
            inValue.pcWhseCode = pcWhseCode;
            inValue.pcBinNum = pcBinNum;
            inValue.pcLotNum = pcLotNum;
            inValue.pcPCID = pcPCID;
            inValue.pcUOMCode = pcUOMCode;
            inValue.pdTranQty = pdTranQty;
            inValue.pdDimConvFactor = pdDimConvFactor;
            EpicWAS.Epicor.InvTransferSvc.NegativeInventoryTestResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).NegativeInventoryTest(inValue);
            pcMessage = retVal.pcMessage;
            return retVal.pcNeqQtyAction;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.NegativeInventoryTestResponse> NegativeInventoryTestAsync(EpicWAS.Epicor.InvTransferSvc.NegativeInventoryTestRequest request) {
            return base.Channel.NegativeInventoryTestAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.MasterInventoryBinTestsResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.MasterInventoryBinTests(EpicWAS.Epicor.InvTransferSvc.MasterInventoryBinTestsRequest request) {
            return base.Channel.MasterInventoryBinTests(request);
        }
        
        public string MasterInventoryBinTests(ref EpicWAS.Epicor.InvTransferSvc.InvTransferTableset ds, out string pcNeqQtyMessage, out string pcFromPCBinAction, out string pcFromPCBinMessage, out string pcToPCBinAction, out string pcToPCBinMessage) {
            EpicWAS.Epicor.InvTransferSvc.MasterInventoryBinTestsRequest inValue = new EpicWAS.Epicor.InvTransferSvc.MasterInventoryBinTestsRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.InvTransferSvc.MasterInventoryBinTestsResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).MasterInventoryBinTests(inValue);
            ds = retVal.ds;
            pcNeqQtyMessage = retVal.pcNeqQtyMessage;
            pcFromPCBinAction = retVal.pcFromPCBinAction;
            pcFromPCBinMessage = retVal.pcFromPCBinMessage;
            pcToPCBinAction = retVal.pcToPCBinAction;
            pcToPCBinMessage = retVal.pcToPCBinMessage;
            return retVal.pcNeqQtyAction;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.MasterInventoryBinTestsResponse> MasterInventoryBinTestsAsync(EpicWAS.Epicor.InvTransferSvc.MasterInventoryBinTestsRequest request) {
            return base.Channel.MasterInventoryBinTestsAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.InvTransferSvc.GetPartFromRowIDResponse EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract.GetPartFromRowID(EpicWAS.Epicor.InvTransferSvc.GetPartFromRowIDRequest request) {
            return base.Channel.GetPartFromRowID(request);
        }
        
        public string GetPartFromRowID(string ipRowType, System.Guid ipRowID, out string opUOM) {
            EpicWAS.Epicor.InvTransferSvc.GetPartFromRowIDRequest inValue = new EpicWAS.Epicor.InvTransferSvc.GetPartFromRowIDRequest();
            inValue.ipRowType = ipRowType;
            inValue.ipRowID = ipRowID;
            EpicWAS.Epicor.InvTransferSvc.GetPartFromRowIDResponse retVal = ((EpicWAS.Epicor.InvTransferSvc.InvTransferSvcContract)(this)).GetPartFromRowID(inValue);
            opUOM = retVal.opUOM;
            return retVal.opPartNum;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.InvTransferSvc.GetPartFromRowIDResponse> GetPartFromRowIDAsync(EpicWAS.Epicor.InvTransferSvc.GetPartFromRowIDRequest request) {
            return base.Channel.GetPartFromRowIDAsync(request);
        }
    }
}
