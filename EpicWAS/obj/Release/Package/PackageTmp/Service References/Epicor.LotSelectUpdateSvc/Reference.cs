//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EpicWAS.Epicor.LotSelectUpdateSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
    [System.SerializableAttribute()]
    public partial class EpicorFaultDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CorrelationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.EpicorExceptionData[] DataListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionKindValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail InnerFaultDetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_exKindQualifiedNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_exceptionQualifiedNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CorrelationId {
            get {
                return this.CorrelationIdField;
            }
            set {
                if ((this.CorrelationIdField.Equals(value) != true)) {
                    this.CorrelationIdField = value;
                    this.RaisePropertyChanged("CorrelationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.EpicorExceptionData[] DataList {
            get {
                return this.DataListField;
            }
            set {
                if ((object.ReferenceEquals(this.DataListField, value) != true)) {
                    this.DataListField = value;
                    this.RaisePropertyChanged("DataList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExceptionKindValue {
            get {
                return this.ExceptionKindValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionKindValueField, value) != true)) {
                    this.ExceptionKindValueField = value;
                    this.RaisePropertyChanged("ExceptionKindValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail InnerFaultDetail {
            get {
                return this.InnerFaultDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.InnerFaultDetailField, value) != true)) {
                    this.InnerFaultDetailField = value;
                    this.RaisePropertyChanged("InnerFaultDetail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_exKindQualifiedName {
            get {
                return this.m_exKindQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.m_exKindQualifiedNameField, value) != true)) {
                    this.m_exKindQualifiedNameField = value;
                    this.RaisePropertyChanged("m_exKindQualifiedName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_exceptionQualifiedName {
            get {
                return this.m_exceptionQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.m_exceptionQualifiedNameField, value) != true)) {
                    this.m_exceptionQualifiedNameField = value;
                    this.RaisePropertyChanged("m_exceptionQualifiedName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EpicorExceptionData", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
    [System.SerializableAttribute()]
    public partial class EpicorExceptionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int m_ColumnNumberField;
        
        private int m_LineNumberField;
        
        private string m_MessageField;
        
        private string[] m_MessageDetailsField;
        
        private string m_MethodField;
        
        private string m_ProgramField;
        
        private System.Collections.Generic.Dictionary<string, string> m_PropertiesField;
        
        private string m_TraceStackField;
        
        private System.Collections.Generic.Dictionary<string, string> m_UserPropertiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_ColumnNumber {
            get {
                return this.m_ColumnNumberField;
            }
            set {
                if ((this.m_ColumnNumberField.Equals(value) != true)) {
                    this.m_ColumnNumberField = value;
                    this.RaisePropertyChanged("m_ColumnNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_LineNumber {
            get {
                return this.m_LineNumberField;
            }
            set {
                if ((this.m_LineNumberField.Equals(value) != true)) {
                    this.m_LineNumberField = value;
                    this.RaisePropertyChanged("m_LineNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Message {
            get {
                return this.m_MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MessageField, value) != true)) {
                    this.m_MessageField = value;
                    this.RaisePropertyChanged("m_Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] m_MessageDetails {
            get {
                return this.m_MessageDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MessageDetailsField, value) != true)) {
                    this.m_MessageDetailsField = value;
                    this.RaisePropertyChanged("m_MessageDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Method {
            get {
                return this.m_MethodField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MethodField, value) != true)) {
                    this.m_MethodField = value;
                    this.RaisePropertyChanged("m_Method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Program {
            get {
                return this.m_ProgramField;
            }
            set {
                if ((object.ReferenceEquals(this.m_ProgramField, value) != true)) {
                    this.m_ProgramField = value;
                    this.RaisePropertyChanged("m_Program");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> m_Properties {
            get {
                return this.m_PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.m_PropertiesField, value) != true)) {
                    this.m_PropertiesField = value;
                    this.RaisePropertyChanged("m_Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_TraceStack {
            get {
                return this.m_TraceStackField;
            }
            set {
                if ((object.ReferenceEquals(this.m_TraceStackField, value) != true)) {
                    this.m_TraceStackField = value;
                    this.RaisePropertyChanged("m_TraceStack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> m_UserProperties {
            get {
                return this.m_UserPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.m_UserPropertiesField, value) != true)) {
                    this.m_UserPropertiesField = value;
                    this.RaisePropertyChanged("m_UserProperties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IceTableset", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.UpdExtLotSelectUpdateTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset))]
    public partial class IceTableset : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionTableData[] ExtensionTablesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionTableData[] ExtensionTables {
            get {
                return this.ExtensionTablesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionTablesField, value) != true)) {
                    this.ExtensionTablesField = value;
                    this.RaisePropertyChanged("ExtensionTables");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LotSelectUpdateTableset", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class LotSelectUpdateTableset : EpicWAS.Epicor.LotSelectUpdateSvc.IceTableset {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.PartLotTable PartLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchTable PartLotAttchField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotTable PartLot {
            get {
                return this.PartLotField;
            }
            set {
                if ((object.ReferenceEquals(this.PartLotField, value) != true)) {
                    this.PartLotField = value;
                    this.RaisePropertyChanged("PartLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchTable PartLotAttch {
            get {
                return this.PartLotAttchField;
            }
            set {
                if ((object.ReferenceEquals(this.PartLotAttchField, value) != true)) {
                    this.PartLotAttchField = value;
                    this.RaisePropertyChanged("PartLotAttch");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdExtLotSelectUpdateTableset", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class UpdExtLotSelectUpdateTableset : EpicWAS.Epicor.LotSelectUpdateSvc.IceTableset {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.PartLotTable PartLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchTable PartLotAttchField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotTable PartLot {
            get {
                return this.PartLotField;
            }
            set {
                if ((object.ReferenceEquals(this.PartLotField, value) != true)) {
                    this.PartLotField = value;
                    this.RaisePropertyChanged("PartLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchTable PartLotAttch {
            get {
                return this.PartLotAttchField;
            }
            set {
                if ((object.ReferenceEquals(this.PartLotAttchField, value) != true)) {
                    this.PartLotAttchField = value;
                    this.RaisePropertyChanged("PartLotAttch");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BOUpdErrorTableset", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    public partial class BOUpdErrorTableset : EpicWAS.Epicor.LotSelectUpdateSvc.IceTableset {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorTable BOUpdErrorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorTable BOUpdError {
            get {
                return this.BOUpdErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.BOUpdErrorField, value) != true)) {
                    this.BOUpdErrorField = value;
                    this.RaisePropertyChanged("BOUpdError");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartLotListTableset", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class PartLotListTableset : EpicWAS.Epicor.LotSelectUpdateSvc.IceTableset {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTable PartLotListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTable PartLotList {
            get {
                return this.PartLotListField;
            }
            set {
                if ((object.ReferenceEquals(this.PartLotListField, value) != true)) {
                    this.PartLotListField = value;
                    this.RaisePropertyChanged("PartLotList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtensionTableData", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions")]
    [System.SerializableAttribute()]
    public partial class ExtensionTableData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionTable TableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionTableColumn[] ColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PrimaryKeyColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeerTableSystemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeerTableNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionTable Table {
            get {
                return this.TableField;
            }
            set {
                if ((object.ReferenceEquals(this.TableField, value) != true)) {
                    this.TableField = value;
                    this.RaisePropertyChanged("Table");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string SystemCode {
            get {
                return this.SystemCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemCodeField, value) != true)) {
                    this.SystemCodeField = value;
                    this.RaisePropertyChanged("SystemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionTableColumn[] Columns {
            get {
                return this.ColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnsField, value) != true)) {
                    this.ColumnsField = value;
                    this.RaisePropertyChanged("Columns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string[] PrimaryKeyColumns {
            get {
                return this.PrimaryKeyColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryKeyColumnsField, value) != true)) {
                    this.PrimaryKeyColumnsField = value;
                    this.RaisePropertyChanged("PrimaryKeyColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string PeerTableSystemCode {
            get {
                return this.PeerTableSystemCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PeerTableSystemCodeField, value) != true)) {
                    this.PeerTableSystemCodeField = value;
                    this.RaisePropertyChanged("PeerTableSystemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string PeerTableName {
            get {
                return this.PeerTableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PeerTableNameField, value) != true)) {
                    this.PeerTableNameField = value;
                    this.RaisePropertyChanged("PeerTableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="PartLotListTable", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets", ItemName="PartLotListRow")]
    [System.SerializableAttribute()]
    public class PartLotListTable : System.Collections.Generic.List<EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ExtensionTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions", ItemName="ExtensionRow")]
    [System.SerializableAttribute()]
    public class ExtensionTable : System.Collections.Generic.List<EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtensionTableColumn", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions")]
    [System.SerializableAttribute()]
    public partial class ExtensionTableColumn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColumnNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColumnTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnName {
            get {
                return this.ColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnNameField, value) != true)) {
                    this.ColumnNameField = value;
                    this.RaisePropertyChanged("ColumnName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnType {
            get {
                return this.ColumnTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnTypeField, value) != true)) {
                    this.ColumnTypeField = value;
                    this.RaisePropertyChanged("ColumnType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtensionRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.UserDefinedColumns))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.TempRowBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListRowColumnOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotRowColumnOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchRowColumnOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.UpdExtLotSelectUpdateTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.IceTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.IceRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionTableData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionTableData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionTableColumn[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionTableColumn))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorExceptionData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorExceptionData))]
    public partial class ExtensionRow : EpicWAS.Epicor.LotSelectUpdateSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object[] ColumnValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object[] ColumnValues {
            get {
                return this.ColumnValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnValuesField, value) != true)) {
                    this.ColumnValuesField = value;
                    this.RaisePropertyChanged("ColumnValues");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TempRowBase", Namespace="http://schemas.datacontract.org/2004/07/Epicor.Data")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.IceRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionRow))]
    public partial class TempRowBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IceRow", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.ExtensionRow))]
    public partial class IceRow : EpicWAS.Epicor.LotSelectUpdateSvc.TempRowBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RowModField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SpecifiedPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SysRowIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.UserDefinedColumns UserDefinedColumnsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RowMod {
            get {
                return this.RowModField;
            }
            set {
                if ((object.ReferenceEquals(this.RowModField, value) != true)) {
                    this.RowModField = value;
                    this.RaisePropertyChanged("RowMod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] SpecifiedProperties {
            get {
                return this.SpecifiedPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecifiedPropertiesField, value) != true)) {
                    this.SpecifiedPropertiesField = value;
                    this.RaisePropertyChanged("SpecifiedProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SysRowID {
            get {
                return this.SysRowIDField;
            }
            set {
                if ((this.SysRowIDField.Equals(value) != true)) {
                    this.SysRowIDField = value;
                    this.RaisePropertyChanged("SysRowID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.UserDefinedColumns UserDefinedColumns {
            get {
                return this.UserDefinedColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.UserDefinedColumnsField, value) != true)) {
                    this.UserDefinedColumnsField = value;
                    this.RaisePropertyChanged("UserDefinedColumns");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartLotListRow", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class PartLotListRow : EpicWAS.Epicor.LotSelectUpdateSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BestBeforeDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CSFCJ5ApvlEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CSFCJ5ApvlStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CSFCJ5AvailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CSFCJ5FormNbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CSFCJ5VesselField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CSFLMWAvailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CSFLMWComOathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CureDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExpireDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FIFOLotBurdenCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FIFOLotLaborCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FIFOLotMaterialCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FIFOLotMtlBurCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FIFOLotSubContCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirmWareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> FirstRefDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeatNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImportedFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportedFromDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastRefDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LotBurdenCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LotLaborCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LotMaterialCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LotMtlBurCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LotNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LotSubContCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MfgBatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> MfgDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MfgLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OnHandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal OnHandQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartLotDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumIUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumPartDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumPricePerCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumSalesUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PartNumSellingFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartNumTrackDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartNumTrackLotsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartNumTrackSerialNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ScrLotBurdenCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ScrLotLaborCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ScrLotMaterialCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ScrLotMtlBurCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ScrLotSubContCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShipDocAvailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionSourceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Batch {
            get {
                return this.BatchField;
            }
            set {
                if ((object.ReferenceEquals(this.BatchField, value) != true)) {
                    this.BatchField = value;
                    this.RaisePropertyChanged("Batch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> BestBeforeDt {
            get {
                return this.BestBeforeDtField;
            }
            set {
                if ((this.BestBeforeDtField.Equals(value) != true)) {
                    this.BestBeforeDtField = value;
                    this.RaisePropertyChanged("BestBeforeDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CSFCJ5ApvlEnd {
            get {
                return this.CSFCJ5ApvlEndField;
            }
            set {
                if ((this.CSFCJ5ApvlEndField.Equals(value) != true)) {
                    this.CSFCJ5ApvlEndField = value;
                    this.RaisePropertyChanged("CSFCJ5ApvlEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CSFCJ5ApvlStart {
            get {
                return this.CSFCJ5ApvlStartField;
            }
            set {
                if ((this.CSFCJ5ApvlStartField.Equals(value) != true)) {
                    this.CSFCJ5ApvlStartField = value;
                    this.RaisePropertyChanged("CSFCJ5ApvlStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CSFCJ5Avail {
            get {
                return this.CSFCJ5AvailField;
            }
            set {
                if ((this.CSFCJ5AvailField.Equals(value) != true)) {
                    this.CSFCJ5AvailField = value;
                    this.RaisePropertyChanged("CSFCJ5Avail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CSFCJ5FormNbr {
            get {
                return this.CSFCJ5FormNbrField;
            }
            set {
                if ((object.ReferenceEquals(this.CSFCJ5FormNbrField, value) != true)) {
                    this.CSFCJ5FormNbrField = value;
                    this.RaisePropertyChanged("CSFCJ5FormNbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CSFCJ5Vessel {
            get {
                return this.CSFCJ5VesselField;
            }
            set {
                if ((object.ReferenceEquals(this.CSFCJ5VesselField, value) != true)) {
                    this.CSFCJ5VesselField = value;
                    this.RaisePropertyChanged("CSFCJ5Vessel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CSFLMWAvail {
            get {
                return this.CSFLMWAvailField;
            }
            set {
                if ((this.CSFLMWAvailField.Equals(value) != true)) {
                    this.CSFLMWAvailField = value;
                    this.RaisePropertyChanged("CSFLMWAvail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CSFLMWComOath {
            get {
                return this.CSFLMWComOathField;
            }
            set {
                if ((object.ReferenceEquals(this.CSFLMWComOathField, value) != true)) {
                    this.CSFLMWComOathField = value;
                    this.RaisePropertyChanged("CSFLMWComOath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CureDt {
            get {
                return this.CureDtField;
            }
            set {
                if ((this.CureDtField.Equals(value) != true)) {
                    this.CureDtField = value;
                    this.RaisePropertyChanged("CureDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExpirationDate {
            get {
                return this.ExpirationDateField;
            }
            set {
                if ((this.ExpirationDateField.Equals(value) != true)) {
                    this.ExpirationDateField = value;
                    this.RaisePropertyChanged("ExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExpireDt {
            get {
                return this.ExpireDtField;
            }
            set {
                if ((this.ExpireDtField.Equals(value) != true)) {
                    this.ExpireDtField = value;
                    this.RaisePropertyChanged("ExpireDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FIFOLotBurdenCost {
            get {
                return this.FIFOLotBurdenCostField;
            }
            set {
                if ((this.FIFOLotBurdenCostField.Equals(value) != true)) {
                    this.FIFOLotBurdenCostField = value;
                    this.RaisePropertyChanged("FIFOLotBurdenCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FIFOLotLaborCost {
            get {
                return this.FIFOLotLaborCostField;
            }
            set {
                if ((this.FIFOLotLaborCostField.Equals(value) != true)) {
                    this.FIFOLotLaborCostField = value;
                    this.RaisePropertyChanged("FIFOLotLaborCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FIFOLotMaterialCost {
            get {
                return this.FIFOLotMaterialCostField;
            }
            set {
                if ((this.FIFOLotMaterialCostField.Equals(value) != true)) {
                    this.FIFOLotMaterialCostField = value;
                    this.RaisePropertyChanged("FIFOLotMaterialCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FIFOLotMtlBurCost {
            get {
                return this.FIFOLotMtlBurCostField;
            }
            set {
                if ((this.FIFOLotMtlBurCostField.Equals(value) != true)) {
                    this.FIFOLotMtlBurCostField = value;
                    this.RaisePropertyChanged("FIFOLotMtlBurCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FIFOLotSubContCost {
            get {
                return this.FIFOLotSubContCostField;
            }
            set {
                if ((this.FIFOLotSubContCostField.Equals(value) != true)) {
                    this.FIFOLotSubContCostField = value;
                    this.RaisePropertyChanged("FIFOLotSubContCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirmWare {
            get {
                return this.FirmWareField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmWareField, value) != true)) {
                    this.FirmWareField = value;
                    this.RaisePropertyChanged("FirmWare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> FirstRefDate {
            get {
                return this.FirstRefDateField;
            }
            set {
                if ((this.FirstRefDateField.Equals(value) != true)) {
                    this.FirstRefDateField = value;
                    this.RaisePropertyChanged("FirstRefDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HeatNum {
            get {
                return this.HeatNumField;
            }
            set {
                if ((object.ReferenceEquals(this.HeatNumField, value) != true)) {
                    this.HeatNumField = value;
                    this.RaisePropertyChanged("HeatNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportNum {
            get {
                return this.ImportNumField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportNumField, value) != true)) {
                    this.ImportNumField = value;
                    this.RaisePropertyChanged("ImportNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImportedFrom {
            get {
                return this.ImportedFromField;
            }
            set {
                if ((this.ImportedFromField.Equals(value) != true)) {
                    this.ImportedFromField = value;
                    this.RaisePropertyChanged("ImportedFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportedFromDesc {
            get {
                return this.ImportedFromDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportedFromDescField, value) != true)) {
                    this.ImportedFromDescField = value;
                    this.RaisePropertyChanged("ImportedFromDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastRefDate {
            get {
                return this.LastRefDateField;
            }
            set {
                if ((this.LastRefDateField.Equals(value) != true)) {
                    this.LastRefDateField = value;
                    this.RaisePropertyChanged("LastRefDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LotBurdenCost {
            get {
                return this.LotBurdenCostField;
            }
            set {
                if ((this.LotBurdenCostField.Equals(value) != true)) {
                    this.LotBurdenCostField = value;
                    this.RaisePropertyChanged("LotBurdenCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LotLaborCost {
            get {
                return this.LotLaborCostField;
            }
            set {
                if ((this.LotLaborCostField.Equals(value) != true)) {
                    this.LotLaborCostField = value;
                    this.RaisePropertyChanged("LotLaborCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LotMaterialCost {
            get {
                return this.LotMaterialCostField;
            }
            set {
                if ((this.LotMaterialCostField.Equals(value) != true)) {
                    this.LotMaterialCostField = value;
                    this.RaisePropertyChanged("LotMaterialCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LotMtlBurCost {
            get {
                return this.LotMtlBurCostField;
            }
            set {
                if ((this.LotMtlBurCostField.Equals(value) != true)) {
                    this.LotMtlBurCostField = value;
                    this.RaisePropertyChanged("LotMtlBurCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LotNum {
            get {
                return this.LotNumField;
            }
            set {
                if ((object.ReferenceEquals(this.LotNumField, value) != true)) {
                    this.LotNumField = value;
                    this.RaisePropertyChanged("LotNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LotSubContCost {
            get {
                return this.LotSubContCostField;
            }
            set {
                if ((this.LotSubContCostField.Equals(value) != true)) {
                    this.LotSubContCostField = value;
                    this.RaisePropertyChanged("LotSubContCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MfgBatch {
            get {
                return this.MfgBatchField;
            }
            set {
                if ((object.ReferenceEquals(this.MfgBatchField, value) != true)) {
                    this.MfgBatchField = value;
                    this.RaisePropertyChanged("MfgBatch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> MfgDt {
            get {
                return this.MfgDtField;
            }
            set {
                if ((this.MfgDtField.Equals(value) != true)) {
                    this.MfgDtField = value;
                    this.RaisePropertyChanged("MfgDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MfgLot {
            get {
                return this.MfgLotField;
            }
            set {
                if ((object.ReferenceEquals(this.MfgLotField, value) != true)) {
                    this.MfgLotField = value;
                    this.RaisePropertyChanged("MfgLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OnHand {
            get {
                return this.OnHandField;
            }
            set {
                if ((this.OnHandField.Equals(value) != true)) {
                    this.OnHandField = value;
                    this.RaisePropertyChanged("OnHand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OnHandQty {
            get {
                return this.OnHandQtyField;
            }
            set {
                if ((this.OnHandQtyField.Equals(value) != true)) {
                    this.OnHandQtyField = value;
                    this.RaisePropertyChanged("OnHandQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartLotDescription {
            get {
                return this.PartLotDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PartLotDescriptionField, value) != true)) {
                    this.PartLotDescriptionField = value;
                    this.RaisePropertyChanged("PartLotDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNum {
            get {
                return this.PartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumField, value) != true)) {
                    this.PartNumField = value;
                    this.RaisePropertyChanged("PartNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNumIUM {
            get {
                return this.PartNumIUMField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumIUMField, value) != true)) {
                    this.PartNumIUMField = value;
                    this.RaisePropertyChanged("PartNumIUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNumPartDescription {
            get {
                return this.PartNumPartDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumPartDescriptionField, value) != true)) {
                    this.PartNumPartDescriptionField = value;
                    this.RaisePropertyChanged("PartNumPartDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNumPricePerCode {
            get {
                return this.PartNumPricePerCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumPricePerCodeField, value) != true)) {
                    this.PartNumPricePerCodeField = value;
                    this.RaisePropertyChanged("PartNumPricePerCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNumSalesUM {
            get {
                return this.PartNumSalesUMField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumSalesUMField, value) != true)) {
                    this.PartNumSalesUMField = value;
                    this.RaisePropertyChanged("PartNumSalesUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PartNumSellingFactor {
            get {
                return this.PartNumSellingFactorField;
            }
            set {
                if ((this.PartNumSellingFactorField.Equals(value) != true)) {
                    this.PartNumSellingFactorField = value;
                    this.RaisePropertyChanged("PartNumSellingFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartNumTrackDimension {
            get {
                return this.PartNumTrackDimensionField;
            }
            set {
                if ((this.PartNumTrackDimensionField.Equals(value) != true)) {
                    this.PartNumTrackDimensionField = value;
                    this.RaisePropertyChanged("PartNumTrackDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartNumTrackLots {
            get {
                return this.PartNumTrackLotsField;
            }
            set {
                if ((this.PartNumTrackLotsField.Equals(value) != true)) {
                    this.PartNumTrackLotsField = value;
                    this.RaisePropertyChanged("PartNumTrackLots");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartNumTrackSerialNum {
            get {
                return this.PartNumTrackSerialNumField;
            }
            set {
                if ((this.PartNumTrackSerialNumField.Equals(value) != true)) {
                    this.PartNumTrackSerialNumField = value;
                    this.RaisePropertyChanged("PartNumTrackSerialNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Plant {
            get {
                return this.PlantField;
            }
            set {
                if ((object.ReferenceEquals(this.PlantField, value) != true)) {
                    this.PlantField = value;
                    this.RaisePropertyChanged("Plant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ScrLotBurdenCost {
            get {
                return this.ScrLotBurdenCostField;
            }
            set {
                if ((this.ScrLotBurdenCostField.Equals(value) != true)) {
                    this.ScrLotBurdenCostField = value;
                    this.RaisePropertyChanged("ScrLotBurdenCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ScrLotLaborCost {
            get {
                return this.ScrLotLaborCostField;
            }
            set {
                if ((this.ScrLotLaborCostField.Equals(value) != true)) {
                    this.ScrLotLaborCostField = value;
                    this.RaisePropertyChanged("ScrLotLaborCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ScrLotMaterialCost {
            get {
                return this.ScrLotMaterialCostField;
            }
            set {
                if ((this.ScrLotMaterialCostField.Equals(value) != true)) {
                    this.ScrLotMaterialCostField = value;
                    this.RaisePropertyChanged("ScrLotMaterialCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ScrLotMtlBurCost {
            get {
                return this.ScrLotMtlBurCostField;
            }
            set {
                if ((this.ScrLotMtlBurCostField.Equals(value) != true)) {
                    this.ScrLotMtlBurCostField = value;
                    this.RaisePropertyChanged("ScrLotMtlBurCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ScrLotSubContCost {
            get {
                return this.ScrLotSubContCostField;
            }
            set {
                if ((this.ScrLotSubContCostField.Equals(value) != true)) {
                    this.ScrLotSubContCostField = value;
                    this.RaisePropertyChanged("ScrLotSubContCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShipDocAvail {
            get {
                return this.ShipDocAvailField;
            }
            set {
                if ((this.ShipDocAvailField.Equals(value) != true)) {
                    this.ShipDocAvailField = value;
                    this.RaisePropertyChanged("ShipDocAvail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionSource {
            get {
                return this.TransactionSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionSourceField, value) != true)) {
                    this.TransactionSourceField = value;
                    this.RaisePropertyChanged("TransactionSource");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartLotRow", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class PartLotRow : EpicWAS.Epicor.LotSelectUpdateSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BestBeforeDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CSFCJ5ApvlEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CSFCJ5ApvlStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CSFCJ5AvailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CSFCJ5FormNbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CSFCJ5VesselField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CSFLMWAvailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CSFLMWComOathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.PartLotRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CureDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeferManualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExpireDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FIFOLotBurdenCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FIFOLotLaborCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FIFOLotMaterialCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FIFOLotMtlBurCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FIFOLotSubContCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirmWareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> FirstRefDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeatNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImportedFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportedFromDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastRefDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LotBurdenCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LotLaborCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LotMaterialCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LotMtlBurCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LotNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LotSubContCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> MXImportDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MXImportLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MfgBatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> MfgDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MfgLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OnHandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal OnHandQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartLotDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumIUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumPartDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumPricePerCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumSalesUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PartNumSellingFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartNumTrackDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartNumTrackLotsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartNumTrackSerialNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ScrLotBurdenCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ScrLotLaborCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ScrLotMaterialCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ScrLotMtlBurCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ScrLotSubContCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShipDocAvailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TotalQtyAvgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionSourceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Batch {
            get {
                return this.BatchField;
            }
            set {
                if ((object.ReferenceEquals(this.BatchField, value) != true)) {
                    this.BatchField = value;
                    this.RaisePropertyChanged("Batch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> BestBeforeDt {
            get {
                return this.BestBeforeDtField;
            }
            set {
                if ((this.BestBeforeDtField.Equals(value) != true)) {
                    this.BestBeforeDtField = value;
                    this.RaisePropertyChanged("BestBeforeDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CSFCJ5ApvlEnd {
            get {
                return this.CSFCJ5ApvlEndField;
            }
            set {
                if ((this.CSFCJ5ApvlEndField.Equals(value) != true)) {
                    this.CSFCJ5ApvlEndField = value;
                    this.RaisePropertyChanged("CSFCJ5ApvlEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CSFCJ5ApvlStart {
            get {
                return this.CSFCJ5ApvlStartField;
            }
            set {
                if ((this.CSFCJ5ApvlStartField.Equals(value) != true)) {
                    this.CSFCJ5ApvlStartField = value;
                    this.RaisePropertyChanged("CSFCJ5ApvlStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CSFCJ5Avail {
            get {
                return this.CSFCJ5AvailField;
            }
            set {
                if ((this.CSFCJ5AvailField.Equals(value) != true)) {
                    this.CSFCJ5AvailField = value;
                    this.RaisePropertyChanged("CSFCJ5Avail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CSFCJ5FormNbr {
            get {
                return this.CSFCJ5FormNbrField;
            }
            set {
                if ((object.ReferenceEquals(this.CSFCJ5FormNbrField, value) != true)) {
                    this.CSFCJ5FormNbrField = value;
                    this.RaisePropertyChanged("CSFCJ5FormNbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CSFCJ5Vessel {
            get {
                return this.CSFCJ5VesselField;
            }
            set {
                if ((object.ReferenceEquals(this.CSFCJ5VesselField, value) != true)) {
                    this.CSFCJ5VesselField = value;
                    this.RaisePropertyChanged("CSFCJ5Vessel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CSFLMWAvail {
            get {
                return this.CSFLMWAvailField;
            }
            set {
                if ((this.CSFLMWAvailField.Equals(value) != true)) {
                    this.CSFLMWAvailField = value;
                    this.RaisePropertyChanged("CSFLMWAvail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CSFLMWComOath {
            get {
                return this.CSFLMWComOathField;
            }
            set {
                if ((object.ReferenceEquals(this.CSFLMWComOathField, value) != true)) {
                    this.CSFLMWComOathField = value;
                    this.RaisePropertyChanged("CSFLMWComOath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CureDt {
            get {
                return this.CureDtField;
            }
            set {
                if ((this.CureDtField.Equals(value) != true)) {
                    this.CureDtField = value;
                    this.RaisePropertyChanged("CureDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeferManual {
            get {
                return this.DeferManualField;
            }
            set {
                if ((this.DeferManualField.Equals(value) != true)) {
                    this.DeferManualField = value;
                    this.RaisePropertyChanged("DeferManual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExpirationDate {
            get {
                return this.ExpirationDateField;
            }
            set {
                if ((this.ExpirationDateField.Equals(value) != true)) {
                    this.ExpirationDateField = value;
                    this.RaisePropertyChanged("ExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExpireDt {
            get {
                return this.ExpireDtField;
            }
            set {
                if ((this.ExpireDtField.Equals(value) != true)) {
                    this.ExpireDtField = value;
                    this.RaisePropertyChanged("ExpireDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FIFOLotBurdenCost {
            get {
                return this.FIFOLotBurdenCostField;
            }
            set {
                if ((this.FIFOLotBurdenCostField.Equals(value) != true)) {
                    this.FIFOLotBurdenCostField = value;
                    this.RaisePropertyChanged("FIFOLotBurdenCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FIFOLotLaborCost {
            get {
                return this.FIFOLotLaborCostField;
            }
            set {
                if ((this.FIFOLotLaborCostField.Equals(value) != true)) {
                    this.FIFOLotLaborCostField = value;
                    this.RaisePropertyChanged("FIFOLotLaborCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FIFOLotMaterialCost {
            get {
                return this.FIFOLotMaterialCostField;
            }
            set {
                if ((this.FIFOLotMaterialCostField.Equals(value) != true)) {
                    this.FIFOLotMaterialCostField = value;
                    this.RaisePropertyChanged("FIFOLotMaterialCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FIFOLotMtlBurCost {
            get {
                return this.FIFOLotMtlBurCostField;
            }
            set {
                if ((this.FIFOLotMtlBurCostField.Equals(value) != true)) {
                    this.FIFOLotMtlBurCostField = value;
                    this.RaisePropertyChanged("FIFOLotMtlBurCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FIFOLotSubContCost {
            get {
                return this.FIFOLotSubContCostField;
            }
            set {
                if ((this.FIFOLotSubContCostField.Equals(value) != true)) {
                    this.FIFOLotSubContCostField = value;
                    this.RaisePropertyChanged("FIFOLotSubContCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirmWare {
            get {
                return this.FirmWareField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmWareField, value) != true)) {
                    this.FirmWareField = value;
                    this.RaisePropertyChanged("FirmWare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> FirstRefDate {
            get {
                return this.FirstRefDateField;
            }
            set {
                if ((this.FirstRefDateField.Equals(value) != true)) {
                    this.FirstRefDateField = value;
                    this.RaisePropertyChanged("FirstRefDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HeatNum {
            get {
                return this.HeatNumField;
            }
            set {
                if ((object.ReferenceEquals(this.HeatNumField, value) != true)) {
                    this.HeatNumField = value;
                    this.RaisePropertyChanged("HeatNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportNum {
            get {
                return this.ImportNumField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportNumField, value) != true)) {
                    this.ImportNumField = value;
                    this.RaisePropertyChanged("ImportNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImportedFrom {
            get {
                return this.ImportedFromField;
            }
            set {
                if ((this.ImportedFromField.Equals(value) != true)) {
                    this.ImportedFromField = value;
                    this.RaisePropertyChanged("ImportedFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportedFromDesc {
            get {
                return this.ImportedFromDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportedFromDescField, value) != true)) {
                    this.ImportedFromDescField = value;
                    this.RaisePropertyChanged("ImportedFromDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastRefDate {
            get {
                return this.LastRefDateField;
            }
            set {
                if ((this.LastRefDateField.Equals(value) != true)) {
                    this.LastRefDateField = value;
                    this.RaisePropertyChanged("LastRefDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LotBurdenCost {
            get {
                return this.LotBurdenCostField;
            }
            set {
                if ((this.LotBurdenCostField.Equals(value) != true)) {
                    this.LotBurdenCostField = value;
                    this.RaisePropertyChanged("LotBurdenCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LotLaborCost {
            get {
                return this.LotLaborCostField;
            }
            set {
                if ((this.LotLaborCostField.Equals(value) != true)) {
                    this.LotLaborCostField = value;
                    this.RaisePropertyChanged("LotLaborCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LotMaterialCost {
            get {
                return this.LotMaterialCostField;
            }
            set {
                if ((this.LotMaterialCostField.Equals(value) != true)) {
                    this.LotMaterialCostField = value;
                    this.RaisePropertyChanged("LotMaterialCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LotMtlBurCost {
            get {
                return this.LotMtlBurCostField;
            }
            set {
                if ((this.LotMtlBurCostField.Equals(value) != true)) {
                    this.LotMtlBurCostField = value;
                    this.RaisePropertyChanged("LotMtlBurCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LotNum {
            get {
                return this.LotNumField;
            }
            set {
                if ((object.ReferenceEquals(this.LotNumField, value) != true)) {
                    this.LotNumField = value;
                    this.RaisePropertyChanged("LotNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LotSubContCost {
            get {
                return this.LotSubContCostField;
            }
            set {
                if ((this.LotSubContCostField.Equals(value) != true)) {
                    this.LotSubContCostField = value;
                    this.RaisePropertyChanged("LotSubContCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> MXImportDate {
            get {
                return this.MXImportDateField;
            }
            set {
                if ((this.MXImportDateField.Equals(value) != true)) {
                    this.MXImportDateField = value;
                    this.RaisePropertyChanged("MXImportDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MXImportLocation {
            get {
                return this.MXImportLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.MXImportLocationField, value) != true)) {
                    this.MXImportLocationField = value;
                    this.RaisePropertyChanged("MXImportLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MfgBatch {
            get {
                return this.MfgBatchField;
            }
            set {
                if ((object.ReferenceEquals(this.MfgBatchField, value) != true)) {
                    this.MfgBatchField = value;
                    this.RaisePropertyChanged("MfgBatch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> MfgDt {
            get {
                return this.MfgDtField;
            }
            set {
                if ((this.MfgDtField.Equals(value) != true)) {
                    this.MfgDtField = value;
                    this.RaisePropertyChanged("MfgDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MfgLot {
            get {
                return this.MfgLotField;
            }
            set {
                if ((object.ReferenceEquals(this.MfgLotField, value) != true)) {
                    this.MfgLotField = value;
                    this.RaisePropertyChanged("MfgLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OnHand {
            get {
                return this.OnHandField;
            }
            set {
                if ((this.OnHandField.Equals(value) != true)) {
                    this.OnHandField = value;
                    this.RaisePropertyChanged("OnHand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OnHandQty {
            get {
                return this.OnHandQtyField;
            }
            set {
                if ((this.OnHandQtyField.Equals(value) != true)) {
                    this.OnHandQtyField = value;
                    this.RaisePropertyChanged("OnHandQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartLotDescription {
            get {
                return this.PartLotDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PartLotDescriptionField, value) != true)) {
                    this.PartLotDescriptionField = value;
                    this.RaisePropertyChanged("PartLotDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNum {
            get {
                return this.PartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumField, value) != true)) {
                    this.PartNumField = value;
                    this.RaisePropertyChanged("PartNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNumIUM {
            get {
                return this.PartNumIUMField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumIUMField, value) != true)) {
                    this.PartNumIUMField = value;
                    this.RaisePropertyChanged("PartNumIUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNumPartDescription {
            get {
                return this.PartNumPartDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumPartDescriptionField, value) != true)) {
                    this.PartNumPartDescriptionField = value;
                    this.RaisePropertyChanged("PartNumPartDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNumPricePerCode {
            get {
                return this.PartNumPricePerCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumPricePerCodeField, value) != true)) {
                    this.PartNumPricePerCodeField = value;
                    this.RaisePropertyChanged("PartNumPricePerCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNumSalesUM {
            get {
                return this.PartNumSalesUMField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumSalesUMField, value) != true)) {
                    this.PartNumSalesUMField = value;
                    this.RaisePropertyChanged("PartNumSalesUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PartNumSellingFactor {
            get {
                return this.PartNumSellingFactorField;
            }
            set {
                if ((this.PartNumSellingFactorField.Equals(value) != true)) {
                    this.PartNumSellingFactorField = value;
                    this.RaisePropertyChanged("PartNumSellingFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartNumTrackDimension {
            get {
                return this.PartNumTrackDimensionField;
            }
            set {
                if ((this.PartNumTrackDimensionField.Equals(value) != true)) {
                    this.PartNumTrackDimensionField = value;
                    this.RaisePropertyChanged("PartNumTrackDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartNumTrackLots {
            get {
                return this.PartNumTrackLotsField;
            }
            set {
                if ((this.PartNumTrackLotsField.Equals(value) != true)) {
                    this.PartNumTrackLotsField = value;
                    this.RaisePropertyChanged("PartNumTrackLots");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartNumTrackSerialNum {
            get {
                return this.PartNumTrackSerialNumField;
            }
            set {
                if ((this.PartNumTrackSerialNumField.Equals(value) != true)) {
                    this.PartNumTrackSerialNumField = value;
                    this.RaisePropertyChanged("PartNumTrackSerialNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Plant {
            get {
                return this.PlantField;
            }
            set {
                if ((object.ReferenceEquals(this.PlantField, value) != true)) {
                    this.PlantField = value;
                    this.RaisePropertyChanged("Plant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ScrLotBurdenCost {
            get {
                return this.ScrLotBurdenCostField;
            }
            set {
                if ((this.ScrLotBurdenCostField.Equals(value) != true)) {
                    this.ScrLotBurdenCostField = value;
                    this.RaisePropertyChanged("ScrLotBurdenCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ScrLotLaborCost {
            get {
                return this.ScrLotLaborCostField;
            }
            set {
                if ((this.ScrLotLaborCostField.Equals(value) != true)) {
                    this.ScrLotLaborCostField = value;
                    this.RaisePropertyChanged("ScrLotLaborCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ScrLotMaterialCost {
            get {
                return this.ScrLotMaterialCostField;
            }
            set {
                if ((this.ScrLotMaterialCostField.Equals(value) != true)) {
                    this.ScrLotMaterialCostField = value;
                    this.RaisePropertyChanged("ScrLotMaterialCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ScrLotMtlBurCost {
            get {
                return this.ScrLotMtlBurCostField;
            }
            set {
                if ((this.ScrLotMtlBurCostField.Equals(value) != true)) {
                    this.ScrLotMtlBurCostField = value;
                    this.RaisePropertyChanged("ScrLotMtlBurCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ScrLotSubContCost {
            get {
                return this.ScrLotSubContCostField;
            }
            set {
                if ((this.ScrLotSubContCostField.Equals(value) != true)) {
                    this.ScrLotSubContCostField = value;
                    this.RaisePropertyChanged("ScrLotSubContCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShipDocAvail {
            get {
                return this.ShipDocAvailField;
            }
            set {
                if ((this.ShipDocAvailField.Equals(value) != true)) {
                    this.ShipDocAvailField = value;
                    this.RaisePropertyChanged("ShipDocAvail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TotalQtyAvg {
            get {
                return this.TotalQtyAvgField;
            }
            set {
                if ((this.TotalQtyAvgField.Equals(value) != true)) {
                    this.TotalQtyAvgField = value;
                    this.RaisePropertyChanged("TotalQtyAvg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionSource {
            get {
                return this.TransactionSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionSourceField, value) != true)) {
                    this.TransactionSourceField = value;
                    this.RaisePropertyChanged("TransactionSource");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartLotAttchRow", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class PartLotAttchRow : EpicWAS.Epicor.LotSelectUpdateSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DrawDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DrawingSeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ForeignSysRowIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LotNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PDMDocIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XFileRefNumField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocTypeID {
            get {
                return this.DocTypeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DocTypeIDField, value) != true)) {
                    this.DocTypeIDField = value;
                    this.RaisePropertyChanged("DocTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DrawDesc {
            get {
                return this.DrawDescField;
            }
            set {
                if ((object.ReferenceEquals(this.DrawDescField, value) != true)) {
                    this.DrawDescField = value;
                    this.RaisePropertyChanged("DrawDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DrawingSeq {
            get {
                return this.DrawingSeqField;
            }
            set {
                if ((this.DrawingSeqField.Equals(value) != true)) {
                    this.DrawingSeqField = value;
                    this.RaisePropertyChanged("DrawingSeq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ForeignSysRowID {
            get {
                return this.ForeignSysRowIDField;
            }
            set {
                if ((this.ForeignSysRowIDField.Equals(value) != true)) {
                    this.ForeignSysRowIDField = value;
                    this.RaisePropertyChanged("ForeignSysRowID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LotNum {
            get {
                return this.LotNumField;
            }
            set {
                if ((object.ReferenceEquals(this.LotNumField, value) != true)) {
                    this.LotNumField = value;
                    this.RaisePropertyChanged("LotNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PDMDocID {
            get {
                return this.PDMDocIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PDMDocIDField, value) != true)) {
                    this.PDMDocIDField = value;
                    this.RaisePropertyChanged("PDMDocID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNum {
            get {
                return this.PartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumField, value) != true)) {
                    this.PartNumField = value;
                    this.RaisePropertyChanged("PartNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int XFileRefNum {
            get {
                return this.XFileRefNumField;
            }
            set {
                if ((this.XFileRefNumField.Equals(value) != true)) {
                    this.XFileRefNumField = value;
                    this.RaisePropertyChanged("XFileRefNum");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BOUpdErrorRow", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    public partial class BOUpdErrorRow : EpicWAS.Epicor.LotSelectUpdateSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ErrorSysRowIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorLevel {
            get {
                return this.ErrorLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorLevelField, value) != true)) {
                    this.ErrorLevelField = value;
                    this.RaisePropertyChanged("ErrorLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ErrorSysRowID {
            get {
                return this.ErrorSysRowIDField;
            }
            set {
                if ((this.ErrorSysRowIDField.Equals(value) != true)) {
                    this.ErrorSysRowIDField = value;
                    this.RaisePropertyChanged("ErrorSysRowID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorText {
            get {
                return this.ErrorTextField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorTextField, value) != true)) {
                    this.ErrorTextField = value;
                    this.RaisePropertyChanged("ErrorText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorType {
            get {
                return this.ErrorTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorTypeField, value) != true)) {
                    this.ErrorTypeField = value;
                    this.RaisePropertyChanged("ErrorType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="UserDefinedColumns", Namespace="http://epicor.com/UserDefinedColumns", ItemName="Column", KeyName="Name", ValueName="Value")]
    [System.SerializableAttribute()]
    public class UserDefinedColumns : System.Collections.Generic.Dictionary<string, object> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartLotListRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    public enum PartLotListRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNum = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotNum = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartLotDescription = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnHand = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FirstRefDate = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LastRefDate = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotLaborCost = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotBurdenCost = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotMaterialCost = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotSubContCost = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotMtlBurCost = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpirationDate = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ShipDocAvail = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Batch = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MfgBatch = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MfgLot = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HeatNum = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FirmWare = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BestBeforeDt = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MfgDt = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CureDt = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpireDt = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIFOLotLaborCost = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIFOLotBurdenCost = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIFOLotMaterialCost = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIFOLotSubContCost = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIFOLotMtlBurCost = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFLMWComOath = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFCJ5FormNbr = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFCJ5Vessel = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFCJ5ApvlStart = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFCJ5ApvlEnd = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportNum = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportedFrom = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportedFromDesc = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransactionSource = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScrLotBurdenCost = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScrLotLaborCost = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScrLotMaterialCost = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScrLotMtlBurCost = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScrLotSubContCost = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Plant = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnHandQty = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFCJ5Avail = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFLMWAvail = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumPricePerCode = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumTrackDimension = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumIUM = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumSalesUM = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumTrackLots = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumPartDescription = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumSellingFactor = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumTrackSerialNum = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 57,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="PartLotTable", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets", ItemName="PartLotRow")]
    [System.SerializableAttribute()]
    public class PartLotTable : System.Collections.Generic.List<EpicWAS.Epicor.LotSelectUpdateSvc.PartLotRow> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartLotRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    public enum PartLotRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNum = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotNum = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartLotDescription = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnHand = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FirstRefDate = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LastRefDate = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotLaborCost = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotBurdenCost = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotMaterialCost = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotSubContCost = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotMtlBurCost = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpirationDate = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ShipDocAvail = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Batch = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MfgBatch = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MfgLot = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HeatNum = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FirmWare = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BestBeforeDt = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MfgDt = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CureDt = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpireDt = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIFOLotLaborCost = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIFOLotBurdenCost = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIFOLotMaterialCost = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIFOLotSubContCost = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIFOLotMtlBurCost = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFLMWComOath = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFCJ5FormNbr = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFCJ5Vessel = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFCJ5ApvlStart = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFCJ5ApvlEnd = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportNum = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportedFrom = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportedFromDesc = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MXImportLocation = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MXImportDate = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TotalQtyAvg = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFCJ5Avail = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSFLMWAvail = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnHandQty = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Plant = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScrLotBurdenCost = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScrLotLaborCost = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScrLotMaterialCost = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScrLotMtlBurCost = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScrLotSubContCost = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransactionSource = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeferManual = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumPartDescription = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumTrackDimension = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumSalesUM = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumTrackLots = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumIUM = 57,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumSellingFactor = 58,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumPricePerCode = 59,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNumTrackSerialNum = 60,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 61,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 62,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="PartLotAttchTable", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets", ItemName="PartLotAttchRow")]
    [System.SerializableAttribute()]
    public class PartLotAttchTable : System.Collections.Generic.List<EpicWAS.Epicor.LotSelectUpdateSvc.PartLotAttchRow> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartLotAttchRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    public enum PartLotAttchRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNum = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotNum = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DrawingSeq = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XFileRefNum = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForeignSysRowID = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DrawDesc = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FileName = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PDMDocID = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DocTypeID = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 13,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="BOUpdErrorTable", Namespace="http://schemas.datacontract.org/2004/07/Ice", ItemName="BOUpdErrorRow")]
    [System.SerializableAttribute()]
    public class BOUpdErrorTable : System.Collections.Generic.List<EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorRow> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Erp:BO:LotSelectUpdate", ConfigurationName="Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract")]
    public interface LotSelectUpdateSvcContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/CheckDupLotNum", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/CheckDupLotNumResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/CheckDupLotNumEpicorFaultDetail" +
            "Fault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="vMessage")]
        string CheckDupLotNum(string vLotNum, string vPartNum, string vRowid);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/CheckDupLotNum", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/CheckDupLotNumResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="vMessage")]
        System.Threading.Tasks.Task<string> CheckDupLotNumAsync(string vLotNum, string vPartNum, string vRowid);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ChkForNeedsLotAttrs", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ChkForNeedsLotAttrsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ChkForNeedsLotAttrsEpicorFaultD" +
            "etailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="needsLotAttrs")]
        bool ChkForNeedsLotAttrs(string pcPartNum, string pcLotNum, string pcDeferOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ChkForNeedsLotAttrs", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ChkForNeedsLotAttrsResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="needsLotAttrs")]
        System.Threading.Tasks.Task<bool> ChkForNeedsLotAttrsAsync(string pcPartNum, string pcLotNum, string pcDeferOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GenerateNewLotNum", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GenerateNewLotNumResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GenerateNewLotNumEpicorFaultDet" +
            "ailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="vNewLotNum")]
        string GenerateNewLotNum(string vPartNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GenerateNewLotNum", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GenerateNewLotNumResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="vNewLotNum")]
        System.Threading.Tasks.Task<string> GenerateNewLotNumAsync(string vPartNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListByBinNum", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListByBinNumResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListByBinNumEpicorFaultDetai" +
            "lFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.GetListByBinNumResponse GetListByBinNum(EpicWAS.Epicor.LotSelectUpdateSvc.GetListByBinNumRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListByBinNum", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListByBinNumResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.GetListByBinNumResponse> GetListByBinNumAsync(EpicWAS.Epicor.LotSelectUpdateSvc.GetListByBinNumRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListByWarehouse", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListByWarehouseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListByWarehouseEpicorFaultDe" +
            "tailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset GetListByWarehouse(string ipWarehouseCode, string ipPartNum, string ipUOMCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListByWarehouse", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListByWarehouseResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset> GetListByWarehouseAsync(string ipWarehouseCode, string ipPartNum, string ipUOMCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ValidateLotAttributes", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ValidateLotAttributesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ValidateLotAttributesEpicorFaul" +
            "tDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.ValidateLotAttributesResponse ValidateLotAttributes(EpicWAS.Epicor.LotSelectUpdateSvc.ValidateLotAttributesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ValidateLotAttributes", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ValidateLotAttributesResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.ValidateLotAttributesResponse> ValidateLotAttributesAsync(EpicWAS.Epicor.LotSelectUpdateSvc.ValidateLotAttributesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ValidateShippingDocumentsAttach" +
            "ed", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ValidateShippingDocumentsAttach" +
            "edResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ValidateShippingDocumentsAttach" +
            "edEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.ValidateShippingDocumentsAttachedResponse ValidateShippingDocumentsAttached(EpicWAS.Epicor.LotSelectUpdateSvc.ValidateShippingDocumentsAttachedRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ValidateShippingDocumentsAttach" +
            "ed", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/ValidateShippingDocumentsAttach" +
            "edResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.ValidateShippingDocumentsAttachedResponse> ValidateShippingDocumentsAttachedAsync(EpicWAS.Epicor.LotSelectUpdateSvc.ValidateShippingDocumentsAttachedRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetNewPartLot", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetNewPartLotResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetNewPartLotEpicorFaultDetailF" +
            "ault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotResponse GetNewPartLot(EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetNewPartLot", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetNewPartLotResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotResponse> GetNewPartLotAsync(EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetNewPartLotAttch", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetNewPartLotAttchResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetNewPartLotAttchEpicorFaultDe" +
            "tailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotAttchResponse GetNewPartLotAttch(EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotAttchRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetNewPartLotAttch", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetNewPartLotAttchResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotAttchResponse> GetNewPartLotAttchAsync(EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotAttchRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/DeleteByID", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/DeleteByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/DeleteByIDEpicorFaultDetailFaul" +
            "t", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        void DeleteByID(string partNum, string lotNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/DeleteByID", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/DeleteByIDResponse")]
        System.Threading.Tasks.Task DeleteByIDAsync(string partNum, string lotNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetByID", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetByIDEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset GetByID(string partNum, string lotNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetByID", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetByIDResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset> GetByIDAsync(string partNum, string lotNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetList", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.GetListResponse GetList(EpicWAS.Epicor.LotSelectUpdateSvc.GetListRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetList", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetListResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.GetListResponse> GetListAsync(EpicWAS.Epicor.LotSelectUpdateSvc.GetListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetRows", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetRowsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetRowsEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.GetRowsResponse GetRows(EpicWAS.Epicor.LotSelectUpdateSvc.GetRowsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetRows", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetRowsResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.GetRowsResponse> GetRowsAsync(EpicWAS.Epicor.LotSelectUpdateSvc.GetRowsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetBySysRowID", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetBySysRowIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetBySysRowIDEpicorFaultDetailF" +
            "ault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset GetBySysRowID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetBySysRowID", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetBySysRowIDResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset> GetBySysRowIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetBySysRowIDs", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetBySysRowIDsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetBySysRowIDsEpicorFaultDetail" +
            "Fault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset GetBySysRowIDs(System.Guid[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetBySysRowIDs", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/GetBySysRowIDsResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset> GetBySysRowIDsAsync(System.Guid[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/Update", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/UpdateEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.UpdateResponse Update(EpicWAS.Epicor.LotSelectUpdateSvc.UpdateRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/Update", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/UpdateResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.UpdateResponse> UpdateAsync(EpicWAS.Epicor.LotSelectUpdateSvc.UpdateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/UpdateExt", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/UpdateExtResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.LotSelectUpdateSvc.EpicorFaultDetail), Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/UpdateExtEpicorFaultDetailFault" +
            "", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.LotSelectUpdateSvc.UpdateExtResponse UpdateExt(EpicWAS.Epicor.LotSelectUpdateSvc.UpdateExtRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/UpdateExt", ReplyAction="Erp:BO:LotSelectUpdate/LotSelectUpdateSvcContract/UpdateExtResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.UpdateExtResponse> UpdateExtAsync(EpicWAS.Epicor.LotSelectUpdateSvc.UpdateExtRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetListByBinNum", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class GetListByBinNumRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public string ipWarehouseCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=1)]
        public string ipBinNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=2)]
        public string whereclause;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=3)]
        public int pageSize;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=4)]
        public int absolutePage;
        
        public GetListByBinNumRequest() {
        }
        
        public GetListByBinNumRequest(string ipWarehouseCode, string ipBinNum, string whereclause, int pageSize, int absolutePage) {
            this.ipWarehouseCode = ipWarehouseCode;
            this.ipBinNum = ipBinNum;
            this.whereclause = whereclause;
            this.pageSize = pageSize;
            this.absolutePage = absolutePage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetListByBinNumResponse", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class GetListByBinNumResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset GetListByBinNumResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=1)]
        public bool morePages;
        
        public GetListByBinNumResponse() {
        }
        
        public GetListByBinNumResponse(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset GetListByBinNumResult, bool morePages) {
            this.GetListByBinNumResult = GetListByBinNumResult;
            this.morePages = morePages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateLotAttributes", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class ValidateLotAttributesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds;
        
        public ValidateLotAttributesRequest() {
        }
        
        public ValidateLotAttributesRequest(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateLotAttributesResponse", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class ValidateLotAttributesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds;
        
        public ValidateLotAttributesResponse() {
        }
        
        public ValidateLotAttributesResponse(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateShippingDocumentsAttached", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class ValidateShippingDocumentsAttachedRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds;
        
        public ValidateShippingDocumentsAttachedRequest() {
        }
        
        public ValidateShippingDocumentsAttachedRequest(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateShippingDocumentsAttachedResponse", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class ValidateShippingDocumentsAttachedResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public bool ValidateShippingDocumentsAttachedResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=1)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds;
        
        public ValidateShippingDocumentsAttachedResponse() {
        }
        
        public ValidateShippingDocumentsAttachedResponse(bool ValidateShippingDocumentsAttachedResult, EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds) {
            this.ValidateShippingDocumentsAttachedResult = ValidateShippingDocumentsAttachedResult;
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNewPartLot", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class GetNewPartLotRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=1)]
        public string partNum;
        
        public GetNewPartLotRequest() {
        }
        
        public GetNewPartLotRequest(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds, string partNum) {
            this.ds = ds;
            this.partNum = partNum;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNewPartLotResponse", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class GetNewPartLotResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds;
        
        public GetNewPartLotResponse() {
        }
        
        public GetNewPartLotResponse(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNewPartLotAttch", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class GetNewPartLotAttchRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=1)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=2)]
        public string lotNum;
        
        public GetNewPartLotAttchRequest() {
        }
        
        public GetNewPartLotAttchRequest(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds, string partNum, string lotNum) {
            this.ds = ds;
            this.partNum = partNum;
            this.lotNum = lotNum;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNewPartLotAttchResponse", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class GetNewPartLotAttchResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds;
        
        public GetNewPartLotAttchResponse() {
        }
        
        public GetNewPartLotAttchResponse(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetList", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class GetListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public string whereClause;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=1)]
        public int pageSize;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=2)]
        public int absolutePage;
        
        public GetListRequest() {
        }
        
        public GetListRequest(string whereClause, int pageSize, int absolutePage) {
            this.whereClause = whereClause;
            this.pageSize = pageSize;
            this.absolutePage = absolutePage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetListResponse", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class GetListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset GetListResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=1)]
        public bool morePages;
        
        public GetListResponse() {
        }
        
        public GetListResponse(EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset GetListResult, bool morePages) {
            this.GetListResult = GetListResult;
            this.morePages = morePages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRows", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class GetRowsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public string whereClausePartLot;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=1)]
        public string whereClausePartLotAttch;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=2)]
        public int pageSize;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=3)]
        public int absolutePage;
        
        public GetRowsRequest() {
        }
        
        public GetRowsRequest(string whereClausePartLot, string whereClausePartLotAttch, int pageSize, int absolutePage) {
            this.whereClausePartLot = whereClausePartLot;
            this.whereClausePartLotAttch = whereClausePartLotAttch;
            this.pageSize = pageSize;
            this.absolutePage = absolutePage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRowsResponse", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class GetRowsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset GetRowsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=1)]
        public bool morePages;
        
        public GetRowsResponse() {
        }
        
        public GetRowsResponse(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset GetRowsResult, bool morePages) {
            this.GetRowsResult = GetRowsResult;
            this.morePages = morePages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Update", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class UpdateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds;
        
        public UpdateRequest() {
        }
        
        public UpdateRequest(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateResponse", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class UpdateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds;
        
        public UpdateResponse() {
        }
        
        public UpdateResponse(EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateExt", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class UpdateExtRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.UpdExtLotSelectUpdateTableset ds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=1)]
        public bool continueProcessingOnError;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=2)]
        public bool rollbackParentOnChildError;
        
        public UpdateExtRequest() {
        }
        
        public UpdateExtRequest(EpicWAS.Epicor.LotSelectUpdateSvc.UpdExtLotSelectUpdateTableset ds, bool continueProcessingOnError, bool rollbackParentOnChildError) {
            this.ds = ds;
            this.continueProcessingOnError = continueProcessingOnError;
            this.rollbackParentOnChildError = rollbackParentOnChildError;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateExtResponse", WrapperNamespace="Erp:BO:LotSelectUpdate", IsWrapped=true)]
    public partial class UpdateExtResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=0)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorTableset UpdateExtResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=1)]
        public EpicWAS.Epicor.LotSelectUpdateSvc.UpdExtLotSelectUpdateTableset ds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:LotSelectUpdate", Order=2)]
        public bool errorsOccurred;
        
        public UpdateExtResponse() {
        }
        
        public UpdateExtResponse(EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorTableset UpdateExtResult, EpicWAS.Epicor.LotSelectUpdateSvc.UpdExtLotSelectUpdateTableset ds, bool errorsOccurred) {
            this.UpdateExtResult = UpdateExtResult;
            this.ds = ds;
            this.errorsOccurred = errorsOccurred;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LotSelectUpdateSvcContractChannel : EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LotSelectUpdateSvcContractClient : System.ServiceModel.ClientBase<EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract>, EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract {
        
        public LotSelectUpdateSvcContractClient() {
        }
        
        public LotSelectUpdateSvcContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LotSelectUpdateSvcContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LotSelectUpdateSvcContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LotSelectUpdateSvcContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CheckDupLotNum(string vLotNum, string vPartNum, string vRowid) {
            return base.Channel.CheckDupLotNum(vLotNum, vPartNum, vRowid);
        }
        
        public System.Threading.Tasks.Task<string> CheckDupLotNumAsync(string vLotNum, string vPartNum, string vRowid) {
            return base.Channel.CheckDupLotNumAsync(vLotNum, vPartNum, vRowid);
        }
        
        public bool ChkForNeedsLotAttrs(string pcPartNum, string pcLotNum, string pcDeferOption) {
            return base.Channel.ChkForNeedsLotAttrs(pcPartNum, pcLotNum, pcDeferOption);
        }
        
        public System.Threading.Tasks.Task<bool> ChkForNeedsLotAttrsAsync(string pcPartNum, string pcLotNum, string pcDeferOption) {
            return base.Channel.ChkForNeedsLotAttrsAsync(pcPartNum, pcLotNum, pcDeferOption);
        }
        
        public string GenerateNewLotNum(string vPartNum) {
            return base.Channel.GenerateNewLotNum(vPartNum);
        }
        
        public System.Threading.Tasks.Task<string> GenerateNewLotNumAsync(string vPartNum) {
            return base.Channel.GenerateNewLotNumAsync(vPartNum);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.LotSelectUpdateSvc.GetListByBinNumResponse EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract.GetListByBinNum(EpicWAS.Epicor.LotSelectUpdateSvc.GetListByBinNumRequest request) {
            return base.Channel.GetListByBinNum(request);
        }
        
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset GetListByBinNum(string ipWarehouseCode, string ipBinNum, string whereclause, int pageSize, int absolutePage, out bool morePages) {
            EpicWAS.Epicor.LotSelectUpdateSvc.GetListByBinNumRequest inValue = new EpicWAS.Epicor.LotSelectUpdateSvc.GetListByBinNumRequest();
            inValue.ipWarehouseCode = ipWarehouseCode;
            inValue.ipBinNum = ipBinNum;
            inValue.whereclause = whereclause;
            inValue.pageSize = pageSize;
            inValue.absolutePage = absolutePage;
            EpicWAS.Epicor.LotSelectUpdateSvc.GetListByBinNumResponse retVal = ((EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract)(this)).GetListByBinNum(inValue);
            morePages = retVal.morePages;
            return retVal.GetListByBinNumResult;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.GetListByBinNumResponse> GetListByBinNumAsync(EpicWAS.Epicor.LotSelectUpdateSvc.GetListByBinNumRequest request) {
            return base.Channel.GetListByBinNumAsync(request);
        }
        
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset GetListByWarehouse(string ipWarehouseCode, string ipPartNum, string ipUOMCode) {
            return base.Channel.GetListByWarehouse(ipWarehouseCode, ipPartNum, ipUOMCode);
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset> GetListByWarehouseAsync(string ipWarehouseCode, string ipPartNum, string ipUOMCode) {
            return base.Channel.GetListByWarehouseAsync(ipWarehouseCode, ipPartNum, ipUOMCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.LotSelectUpdateSvc.ValidateLotAttributesResponse EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract.ValidateLotAttributes(EpicWAS.Epicor.LotSelectUpdateSvc.ValidateLotAttributesRequest request) {
            return base.Channel.ValidateLotAttributes(request);
        }
        
        public void ValidateLotAttributes(ref EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds) {
            EpicWAS.Epicor.LotSelectUpdateSvc.ValidateLotAttributesRequest inValue = new EpicWAS.Epicor.LotSelectUpdateSvc.ValidateLotAttributesRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.LotSelectUpdateSvc.ValidateLotAttributesResponse retVal = ((EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract)(this)).ValidateLotAttributes(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.ValidateLotAttributesResponse> ValidateLotAttributesAsync(EpicWAS.Epicor.LotSelectUpdateSvc.ValidateLotAttributesRequest request) {
            return base.Channel.ValidateLotAttributesAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.LotSelectUpdateSvc.ValidateShippingDocumentsAttachedResponse EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract.ValidateShippingDocumentsAttached(EpicWAS.Epicor.LotSelectUpdateSvc.ValidateShippingDocumentsAttachedRequest request) {
            return base.Channel.ValidateShippingDocumentsAttached(request);
        }
        
        public bool ValidateShippingDocumentsAttached(ref EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds) {
            EpicWAS.Epicor.LotSelectUpdateSvc.ValidateShippingDocumentsAttachedRequest inValue = new EpicWAS.Epicor.LotSelectUpdateSvc.ValidateShippingDocumentsAttachedRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.LotSelectUpdateSvc.ValidateShippingDocumentsAttachedResponse retVal = ((EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract)(this)).ValidateShippingDocumentsAttached(inValue);
            ds = retVal.ds;
            return retVal.ValidateShippingDocumentsAttachedResult;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.ValidateShippingDocumentsAttachedResponse> ValidateShippingDocumentsAttachedAsync(EpicWAS.Epicor.LotSelectUpdateSvc.ValidateShippingDocumentsAttachedRequest request) {
            return base.Channel.ValidateShippingDocumentsAttachedAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotResponse EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract.GetNewPartLot(EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotRequest request) {
            return base.Channel.GetNewPartLot(request);
        }
        
        public void GetNewPartLot(ref EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds, string partNum) {
            EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotRequest inValue = new EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotRequest();
            inValue.ds = ds;
            inValue.partNum = partNum;
            EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotResponse retVal = ((EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract)(this)).GetNewPartLot(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotResponse> GetNewPartLotAsync(EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotRequest request) {
            return base.Channel.GetNewPartLotAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotAttchResponse EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract.GetNewPartLotAttch(EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotAttchRequest request) {
            return base.Channel.GetNewPartLotAttch(request);
        }
        
        public void GetNewPartLotAttch(ref EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds, string partNum, string lotNum) {
            EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotAttchRequest inValue = new EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotAttchRequest();
            inValue.ds = ds;
            inValue.partNum = partNum;
            inValue.lotNum = lotNum;
            EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotAttchResponse retVal = ((EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract)(this)).GetNewPartLotAttch(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotAttchResponse> GetNewPartLotAttchAsync(EpicWAS.Epicor.LotSelectUpdateSvc.GetNewPartLotAttchRequest request) {
            return base.Channel.GetNewPartLotAttchAsync(request);
        }
        
        public void DeleteByID(string partNum, string lotNum) {
            base.Channel.DeleteByID(partNum, lotNum);
        }
        
        public System.Threading.Tasks.Task DeleteByIDAsync(string partNum, string lotNum) {
            return base.Channel.DeleteByIDAsync(partNum, lotNum);
        }
        
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset GetByID(string partNum, string lotNum) {
            return base.Channel.GetByID(partNum, lotNum);
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset> GetByIDAsync(string partNum, string lotNum) {
            return base.Channel.GetByIDAsync(partNum, lotNum);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.LotSelectUpdateSvc.GetListResponse EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract.GetList(EpicWAS.Epicor.LotSelectUpdateSvc.GetListRequest request) {
            return base.Channel.GetList(request);
        }
        
        public EpicWAS.Epicor.LotSelectUpdateSvc.PartLotListTableset GetList(string whereClause, int pageSize, int absolutePage, out bool morePages) {
            EpicWAS.Epicor.LotSelectUpdateSvc.GetListRequest inValue = new EpicWAS.Epicor.LotSelectUpdateSvc.GetListRequest();
            inValue.whereClause = whereClause;
            inValue.pageSize = pageSize;
            inValue.absolutePage = absolutePage;
            EpicWAS.Epicor.LotSelectUpdateSvc.GetListResponse retVal = ((EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract)(this)).GetList(inValue);
            morePages = retVal.morePages;
            return retVal.GetListResult;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.GetListResponse> GetListAsync(EpicWAS.Epicor.LotSelectUpdateSvc.GetListRequest request) {
            return base.Channel.GetListAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.LotSelectUpdateSvc.GetRowsResponse EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract.GetRows(EpicWAS.Epicor.LotSelectUpdateSvc.GetRowsRequest request) {
            return base.Channel.GetRows(request);
        }
        
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset GetRows(string whereClausePartLot, string whereClausePartLotAttch, int pageSize, int absolutePage, out bool morePages) {
            EpicWAS.Epicor.LotSelectUpdateSvc.GetRowsRequest inValue = new EpicWAS.Epicor.LotSelectUpdateSvc.GetRowsRequest();
            inValue.whereClausePartLot = whereClausePartLot;
            inValue.whereClausePartLotAttch = whereClausePartLotAttch;
            inValue.pageSize = pageSize;
            inValue.absolutePage = absolutePage;
            EpicWAS.Epicor.LotSelectUpdateSvc.GetRowsResponse retVal = ((EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract)(this)).GetRows(inValue);
            morePages = retVal.morePages;
            return retVal.GetRowsResult;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.GetRowsResponse> GetRowsAsync(EpicWAS.Epicor.LotSelectUpdateSvc.GetRowsRequest request) {
            return base.Channel.GetRowsAsync(request);
        }
        
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset GetBySysRowID(System.Guid id) {
            return base.Channel.GetBySysRowID(id);
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset> GetBySysRowIDAsync(System.Guid id) {
            return base.Channel.GetBySysRowIDAsync(id);
        }
        
        public EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset GetBySysRowIDs(System.Guid[] ids) {
            return base.Channel.GetBySysRowIDs(ids);
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset> GetBySysRowIDsAsync(System.Guid[] ids) {
            return base.Channel.GetBySysRowIDsAsync(ids);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.LotSelectUpdateSvc.UpdateResponse EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract.Update(EpicWAS.Epicor.LotSelectUpdateSvc.UpdateRequest request) {
            return base.Channel.Update(request);
        }
        
        public void Update(ref EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateTableset ds) {
            EpicWAS.Epicor.LotSelectUpdateSvc.UpdateRequest inValue = new EpicWAS.Epicor.LotSelectUpdateSvc.UpdateRequest();
            inValue.ds = ds;
            EpicWAS.Epicor.LotSelectUpdateSvc.UpdateResponse retVal = ((EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract)(this)).Update(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.UpdateResponse> UpdateAsync(EpicWAS.Epicor.LotSelectUpdateSvc.UpdateRequest request) {
            return base.Channel.UpdateAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.LotSelectUpdateSvc.UpdateExtResponse EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract.UpdateExt(EpicWAS.Epicor.LotSelectUpdateSvc.UpdateExtRequest request) {
            return base.Channel.UpdateExt(request);
        }
        
        public EpicWAS.Epicor.LotSelectUpdateSvc.BOUpdErrorTableset UpdateExt(ref EpicWAS.Epicor.LotSelectUpdateSvc.UpdExtLotSelectUpdateTableset ds, bool continueProcessingOnError, bool rollbackParentOnChildError, out bool errorsOccurred) {
            EpicWAS.Epicor.LotSelectUpdateSvc.UpdateExtRequest inValue = new EpicWAS.Epicor.LotSelectUpdateSvc.UpdateExtRequest();
            inValue.ds = ds;
            inValue.continueProcessingOnError = continueProcessingOnError;
            inValue.rollbackParentOnChildError = rollbackParentOnChildError;
            EpicWAS.Epicor.LotSelectUpdateSvc.UpdateExtResponse retVal = ((EpicWAS.Epicor.LotSelectUpdateSvc.LotSelectUpdateSvcContract)(this)).UpdateExt(inValue);
            ds = retVal.ds;
            errorsOccurred = retVal.errorsOccurred;
            return retVal.UpdateExtResult;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.LotSelectUpdateSvc.UpdateExtResponse> UpdateExtAsync(EpicWAS.Epicor.LotSelectUpdateSvc.UpdateExtRequest request) {
            return base.Channel.UpdateExtAsync(request);
        }
    }
}
