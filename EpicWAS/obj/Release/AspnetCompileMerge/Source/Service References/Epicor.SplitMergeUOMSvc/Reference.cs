//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EpicWAS.Epicor.SplitMergeUOMSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IceTableset", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset))]
    public partial class IceTableset : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionTableData[] ExtensionTablesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionTableData[] ExtensionTables {
            get {
                return this.ExtensionTablesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionTablesField, value) != true)) {
                    this.ExtensionTablesField = value;
                    this.RaisePropertyChanged("ExtensionTables");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SplitMergeUOMTableset", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class SplitMergeUOMTableset : EpicWAS.Epicor.SplitMergeUOMSvc.IceTableset {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.SplitMergeUOMSvc.SMDtlTable SMDtlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.SplitMergeUOMSvc.SMHdrTable SMHdrField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SMDtlTable SMDtl {
            get {
                return this.SMDtlField;
            }
            set {
                if ((object.ReferenceEquals(this.SMDtlField, value) != true)) {
                    this.SMDtlField = value;
                    this.RaisePropertyChanged("SMDtl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SMHdrTable SMHdr {
            get {
                return this.SMHdrField;
            }
            set {
                if ((object.ReferenceEquals(this.SMHdrField, value) != true)) {
                    this.SMHdrField = value;
                    this.RaisePropertyChanged("SMHdr");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtensionTableData", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions")]
    [System.SerializableAttribute()]
    public partial class ExtensionTableData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionTable TableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionTableColumn[] ColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PrimaryKeyColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeerTableSystemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeerTableNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionTable Table {
            get {
                return this.TableField;
            }
            set {
                if ((object.ReferenceEquals(this.TableField, value) != true)) {
                    this.TableField = value;
                    this.RaisePropertyChanged("Table");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string SystemCode {
            get {
                return this.SystemCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemCodeField, value) != true)) {
                    this.SystemCodeField = value;
                    this.RaisePropertyChanged("SystemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionTableColumn[] Columns {
            get {
                return this.ColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnsField, value) != true)) {
                    this.ColumnsField = value;
                    this.RaisePropertyChanged("Columns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string[] PrimaryKeyColumns {
            get {
                return this.PrimaryKeyColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryKeyColumnsField, value) != true)) {
                    this.PrimaryKeyColumnsField = value;
                    this.RaisePropertyChanged("PrimaryKeyColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string PeerTableSystemCode {
            get {
                return this.PeerTableSystemCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PeerTableSystemCodeField, value) != true)) {
                    this.PeerTableSystemCodeField = value;
                    this.RaisePropertyChanged("PeerTableSystemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string PeerTableName {
            get {
                return this.PeerTableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PeerTableNameField, value) != true)) {
                    this.PeerTableNameField = value;
                    this.RaisePropertyChanged("PeerTableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SMDtlTable", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets", ItemName="SMDtlRow")]
    [System.SerializableAttribute()]
    public class SMDtlTable : System.Collections.Generic.List<EpicWAS.Epicor.SplitMergeUOMSvc.SMDtlRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SMHdrTable", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets", ItemName="SMHdrRow")]
    [System.SerializableAttribute()]
    public class SMHdrTable : System.Collections.Generic.List<EpicWAS.Epicor.SplitMergeUOMSvc.SMHdrRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ExtensionTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions", ItemName="ExtensionRow")]
    [System.SerializableAttribute()]
    public class ExtensionTable : System.Collections.Generic.List<EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtensionTableColumn", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions")]
    [System.SerializableAttribute()]
    public partial class ExtensionTableColumn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColumnNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColumnTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnName {
            get {
                return this.ColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnNameField, value) != true)) {
                    this.ColumnNameField = value;
                    this.RaisePropertyChanged("ColumnName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnType {
            get {
                return this.ColumnTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnTypeField, value) != true)) {
                    this.ColumnTypeField = value;
                    this.RaisePropertyChanged("ColumnType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtensionRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Extensions")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.IceTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.IceRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.UserDefinedColumns))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SMDtlTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SMDtlRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SMDtlRowColumnOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SMHdrTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SMHdrRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SMHdrRowColumnOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.TempRowBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorExceptionData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorExceptionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionTableData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionTableData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionTableColumn[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionTableColumn))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
    public partial class ExtensionRow : EpicWAS.Epicor.SplitMergeUOMSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object[] ColumnValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object[] ColumnValues {
            get {
                return this.ColumnValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnValuesField, value) != true)) {
                    this.ColumnValuesField = value;
                    this.RaisePropertyChanged("ColumnValues");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TempRowBase", Namespace="http://schemas.datacontract.org/2004/07/Epicor.Data")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.IceRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SMDtlRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SMHdrRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionRow))]
    public partial class TempRowBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IceRow", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SMDtlRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.SMHdrRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.ExtensionRow))]
    public partial class IceRow : EpicWAS.Epicor.SplitMergeUOMSvc.TempRowBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RowModField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SpecifiedPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SysRowIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.SplitMergeUOMSvc.UserDefinedColumns UserDefinedColumnsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RowMod {
            get {
                return this.RowModField;
            }
            set {
                if ((object.ReferenceEquals(this.RowModField, value) != true)) {
                    this.RowModField = value;
                    this.RaisePropertyChanged("RowMod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] SpecifiedProperties {
            get {
                return this.SpecifiedPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecifiedPropertiesField, value) != true)) {
                    this.SpecifiedPropertiesField = value;
                    this.RaisePropertyChanged("SpecifiedProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SysRowID {
            get {
                return this.SysRowIDField;
            }
            set {
                if ((this.SysRowIDField.Equals(value) != true)) {
                    this.SysRowIDField = value;
                    this.RaisePropertyChanged("SysRowID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.SplitMergeUOMSvc.UserDefinedColumns UserDefinedColumns {
            get {
                return this.UserDefinedColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.UserDefinedColumnsField, value) != true)) {
                    this.UserDefinedColumnsField = value;
                    this.RaisePropertyChanged("UserDefinedColumns");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SMDtlRow", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class SMDtlRow : EpicWAS.Epicor.SplitMergeUOMSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AllocatedQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BinNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.SplitMergeUOMSvc.SMDtlRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ConvFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConvFactorUOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LotNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal OnHandQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UOMDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarehouseCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AllocatedQty {
            get {
                return this.AllocatedQtyField;
            }
            set {
                if ((this.AllocatedQtyField.Equals(value) != true)) {
                    this.AllocatedQtyField = value;
                    this.RaisePropertyChanged("AllocatedQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BinNum {
            get {
                return this.BinNumField;
            }
            set {
                if ((object.ReferenceEquals(this.BinNumField, value) != true)) {
                    this.BinNumField = value;
                    this.RaisePropertyChanged("BinNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SMDtlRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ConvFactor {
            get {
                return this.ConvFactorField;
            }
            set {
                if ((this.ConvFactorField.Equals(value) != true)) {
                    this.ConvFactorField = value;
                    this.RaisePropertyChanged("ConvFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConvFactorUOM {
            get {
                return this.ConvFactorUOMField;
            }
            set {
                if ((object.ReferenceEquals(this.ConvFactorUOMField, value) != true)) {
                    this.ConvFactorUOMField = value;
                    this.RaisePropertyChanged("ConvFactorUOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LotNum {
            get {
                return this.LotNumField;
            }
            set {
                if ((object.ReferenceEquals(this.LotNumField, value) != true)) {
                    this.LotNumField = value;
                    this.RaisePropertyChanged("LotNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OnHandQty {
            get {
                return this.OnHandQtyField;
            }
            set {
                if ((this.OnHandQtyField.Equals(value) != true)) {
                    this.OnHandQtyField = value;
                    this.RaisePropertyChanged("OnHandQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNum {
            get {
                return this.PartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumField, value) != true)) {
                    this.PartNumField = value;
                    this.RaisePropertyChanged("PartNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UOM {
            get {
                return this.UOMField;
            }
            set {
                if ((object.ReferenceEquals(this.UOMField, value) != true)) {
                    this.UOMField = value;
                    this.RaisePropertyChanged("UOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UOMDescription {
            get {
                return this.UOMDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.UOMDescriptionField, value) != true)) {
                    this.UOMDescriptionField = value;
                    this.RaisePropertyChanged("UOMDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WarehouseCode {
            get {
                return this.WarehouseCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.WarehouseCodeField, value) != true)) {
                    this.WarehouseCodeField = value;
                    this.RaisePropertyChanged("WarehouseCode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SMHdrRow", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    [System.SerializableAttribute()]
    public partial class SMHdrRow : EpicWAS.Epicor.SplitMergeUOMSvc.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AllocatedQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BinDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BinNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.SplitMergeUOMSvc.SMHdrRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnableLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LotDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LotNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal OnHandQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OnHandUOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OnHandUOMDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal RemainQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemainUOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TransDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TransQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransUOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UOMDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarehouseCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarehouseDescField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AllocatedQty {
            get {
                return this.AllocatedQtyField;
            }
            set {
                if ((this.AllocatedQtyField.Equals(value) != true)) {
                    this.AllocatedQtyField = value;
                    this.RaisePropertyChanged("AllocatedQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BinDescription {
            get {
                return this.BinDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.BinDescriptionField, value) != true)) {
                    this.BinDescriptionField = value;
                    this.RaisePropertyChanged("BinDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BinNum {
            get {
                return this.BinNumField;
            }
            set {
                if ((object.ReferenceEquals(this.BinNumField, value) != true)) {
                    this.BinNumField = value;
                    this.RaisePropertyChanged("BinNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SMHdrRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EnableLot {
            get {
                return this.EnableLotField;
            }
            set {
                if ((this.EnableLotField.Equals(value) != true)) {
                    this.EnableLotField = value;
                    this.RaisePropertyChanged("EnableLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LotDescription {
            get {
                return this.LotDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.LotDescriptionField, value) != true)) {
                    this.LotDescriptionField = value;
                    this.RaisePropertyChanged("LotDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LotNum {
            get {
                return this.LotNumField;
            }
            set {
                if ((object.ReferenceEquals(this.LotNumField, value) != true)) {
                    this.LotNumField = value;
                    this.RaisePropertyChanged("LotNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OnHandQty {
            get {
                return this.OnHandQtyField;
            }
            set {
                if ((this.OnHandQtyField.Equals(value) != true)) {
                    this.OnHandQtyField = value;
                    this.RaisePropertyChanged("OnHandQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OnHandUOM {
            get {
                return this.OnHandUOMField;
            }
            set {
                if ((object.ReferenceEquals(this.OnHandUOMField, value) != true)) {
                    this.OnHandUOMField = value;
                    this.RaisePropertyChanged("OnHandUOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OnHandUOMDesc {
            get {
                return this.OnHandUOMDescField;
            }
            set {
                if ((object.ReferenceEquals(this.OnHandUOMDescField, value) != true)) {
                    this.OnHandUOMDescField = value;
                    this.RaisePropertyChanged("OnHandUOMDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartDescription {
            get {
                return this.PartDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PartDescriptionField, value) != true)) {
                    this.PartDescriptionField = value;
                    this.RaisePropertyChanged("PartDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartNum {
            get {
                return this.PartNumField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNumField, value) != true)) {
                    this.PartNumField = value;
                    this.RaisePropertyChanged("PartNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessType {
            get {
                return this.ProcessTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessTypeField, value) != true)) {
                    this.ProcessTypeField = value;
                    this.RaisePropertyChanged("ProcessType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal RemainQty {
            get {
                return this.RemainQtyField;
            }
            set {
                if ((this.RemainQtyField.Equals(value) != true)) {
                    this.RemainQtyField = value;
                    this.RaisePropertyChanged("RemainQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RemainUOM {
            get {
                return this.RemainUOMField;
            }
            set {
                if ((object.ReferenceEquals(this.RemainUOMField, value) != true)) {
                    this.RemainUOMField = value;
                    this.RaisePropertyChanged("RemainUOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TransDate {
            get {
                return this.TransDateField;
            }
            set {
                if ((this.TransDateField.Equals(value) != true)) {
                    this.TransDateField = value;
                    this.RaisePropertyChanged("TransDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TransQty {
            get {
                return this.TransQtyField;
            }
            set {
                if ((this.TransQtyField.Equals(value) != true)) {
                    this.TransQtyField = value;
                    this.RaisePropertyChanged("TransQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransUOM {
            get {
                return this.TransUOMField;
            }
            set {
                if ((object.ReferenceEquals(this.TransUOMField, value) != true)) {
                    this.TransUOMField = value;
                    this.RaisePropertyChanged("TransUOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UOM {
            get {
                return this.UOMField;
            }
            set {
                if ((object.ReferenceEquals(this.UOMField, value) != true)) {
                    this.UOMField = value;
                    this.RaisePropertyChanged("UOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UOMDescription {
            get {
                return this.UOMDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.UOMDescriptionField, value) != true)) {
                    this.UOMDescriptionField = value;
                    this.RaisePropertyChanged("UOMDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WarehouseCode {
            get {
                return this.WarehouseCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.WarehouseCodeField, value) != true)) {
                    this.WarehouseCodeField = value;
                    this.RaisePropertyChanged("WarehouseCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WarehouseDesc {
            get {
                return this.WarehouseDescField;
            }
            set {
                if ((object.ReferenceEquals(this.WarehouseDescField, value) != true)) {
                    this.WarehouseDescField = value;
                    this.RaisePropertyChanged("WarehouseDesc");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="UserDefinedColumns", Namespace="http://epicor.com/UserDefinedColumns", ItemName="Column", KeyName="Name", ValueName="Value")]
    [System.SerializableAttribute()]
    public class UserDefinedColumns : System.Collections.Generic.Dictionary<string, object> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SMDtlRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    public enum SMDtlRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNum = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WarehouseCode = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BinNum = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotNum = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnHandQty = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Quantity = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UOM = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UOMDescription = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvFactor = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvFactorUOM = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllocatedQty = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 14,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SMHdrRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Erp.Tablesets")]
    public enum SMHdrRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartNum = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WarehouseCode = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BinNum = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotNum = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessType = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnHandQty = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Quantity = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UOM = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransDate = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BinDescription = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotDescription = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PartDescription = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UOMDescription = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WarehouseDesc = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EnableLot = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnHandUOM = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnHandUOMDesc = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RemainQty = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RemainUOM = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransQty = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransUOM = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllocatedQty = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 25,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
    [System.SerializableAttribute()]
    public partial class EpicorFaultDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CorrelationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.SplitMergeUOMSvc.EpicorExceptionData[] DataListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionKindValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail InnerFaultDetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_exKindQualifiedNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_exceptionQualifiedNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CorrelationId {
            get {
                return this.CorrelationIdField;
            }
            set {
                if ((this.CorrelationIdField.Equals(value) != true)) {
                    this.CorrelationIdField = value;
                    this.RaisePropertyChanged("CorrelationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.SplitMergeUOMSvc.EpicorExceptionData[] DataList {
            get {
                return this.DataListField;
            }
            set {
                if ((object.ReferenceEquals(this.DataListField, value) != true)) {
                    this.DataListField = value;
                    this.RaisePropertyChanged("DataList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExceptionKindValue {
            get {
                return this.ExceptionKindValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionKindValueField, value) != true)) {
                    this.ExceptionKindValueField = value;
                    this.RaisePropertyChanged("ExceptionKindValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail InnerFaultDetail {
            get {
                return this.InnerFaultDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.InnerFaultDetailField, value) != true)) {
                    this.InnerFaultDetailField = value;
                    this.RaisePropertyChanged("InnerFaultDetail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_exKindQualifiedName {
            get {
                return this.m_exKindQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.m_exKindQualifiedNameField, value) != true)) {
                    this.m_exKindQualifiedNameField = value;
                    this.RaisePropertyChanged("m_exKindQualifiedName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_exceptionQualifiedName {
            get {
                return this.m_exceptionQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.m_exceptionQualifiedNameField, value) != true)) {
                    this.m_exceptionQualifiedNameField = value;
                    this.RaisePropertyChanged("m_exceptionQualifiedName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EpicorExceptionData", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
    [System.SerializableAttribute()]
    public partial class EpicorExceptionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int m_ColumnNumberField;
        
        private int m_LineNumberField;
        
        private string m_MessageField;
        
        private string[] m_MessageDetailsField;
        
        private string m_MethodField;
        
        private string m_ProgramField;
        
        private System.Collections.Generic.Dictionary<string, string> m_PropertiesField;
        
        private string m_TraceStackField;
        
        private System.Collections.Generic.Dictionary<string, string> m_UserPropertiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_ColumnNumber {
            get {
                return this.m_ColumnNumberField;
            }
            set {
                if ((this.m_ColumnNumberField.Equals(value) != true)) {
                    this.m_ColumnNumberField = value;
                    this.RaisePropertyChanged("m_ColumnNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_LineNumber {
            get {
                return this.m_LineNumberField;
            }
            set {
                if ((this.m_LineNumberField.Equals(value) != true)) {
                    this.m_LineNumberField = value;
                    this.RaisePropertyChanged("m_LineNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Message {
            get {
                return this.m_MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MessageField, value) != true)) {
                    this.m_MessageField = value;
                    this.RaisePropertyChanged("m_Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] m_MessageDetails {
            get {
                return this.m_MessageDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MessageDetailsField, value) != true)) {
                    this.m_MessageDetailsField = value;
                    this.RaisePropertyChanged("m_MessageDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Method {
            get {
                return this.m_MethodField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MethodField, value) != true)) {
                    this.m_MethodField = value;
                    this.RaisePropertyChanged("m_Method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Program {
            get {
                return this.m_ProgramField;
            }
            set {
                if ((object.ReferenceEquals(this.m_ProgramField, value) != true)) {
                    this.m_ProgramField = value;
                    this.RaisePropertyChanged("m_Program");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> m_Properties {
            get {
                return this.m_PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.m_PropertiesField, value) != true)) {
                    this.m_PropertiesField = value;
                    this.RaisePropertyChanged("m_Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_TraceStack {
            get {
                return this.m_TraceStackField;
            }
            set {
                if ((object.ReferenceEquals(this.m_TraceStackField, value) != true)) {
                    this.m_TraceStackField = value;
                    this.RaisePropertyChanged("m_TraceStack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> m_UserProperties {
            get {
                return this.m_UserPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.m_UserPropertiesField, value) != true)) {
                    this.m_UserPropertiesField = value;
                    this.RaisePropertyChanged("m_UserProperties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Erp:BO:SplitMergeUOM", ConfigurationName="Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract")]
    public interface SplitMergeUOMSvcContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/CalculateRemainQty", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/CalculateRemainQtyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail), Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/CalculateRemainQtyEpicorFaultDetail" +
            "Fault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.SplitMergeUOMSvc.CalculateRemainQtyResponse CalculateRemainQty(EpicWAS.Epicor.SplitMergeUOMSvc.CalculateRemainQtyRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/CalculateRemainQty", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/CalculateRemainQtyResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.CalculateRemainQtyResponse> CalculateRemainQtyAsync(EpicWAS.Epicor.SplitMergeUOMSvc.CalculateRemainQtyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/GetPartXRefInfo", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/GetPartXRefInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail), Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/GetPartXRefInfoEpicorFaultDetailFau" +
            "lt", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.SplitMergeUOMSvc.GetPartXRefInfoResponse GetPartXRefInfo(EpicWAS.Epicor.SplitMergeUOMSvc.GetPartXRefInfoRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/GetPartXRefInfo", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/GetPartXRefInfoResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.GetPartXRefInfoResponse> GetPartXRefInfoAsync(EpicWAS.Epicor.SplitMergeUOMSvc.GetPartXRefInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/GetSplitMergeHeadData", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/GetSplitMergeHeadDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail), Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/GetSplitMergeHeadDataEpicorFaultDet" +
            "ailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset GetSplitMergeHeadData(string partNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/GetSplitMergeHeadData", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/GetSplitMergeHeadDataResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset> GetSplitMergeHeadDataAsync(string partNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeBinNum", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeBinNumResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail), Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeBinNumEpicorFaultDetailFaul" +
            "t", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeBinNumResponse OnChangeBinNum(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeBinNumRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeBinNum", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeBinNumResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeBinNumResponse> OnChangeBinNumAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeBinNumRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeLotNum", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeLotNumResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail), Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeLotNumEpicorFaultDetailFaul" +
            "t", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeLotNumResponse OnChangeLotNum(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeLotNumRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeLotNum", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeLotNumResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeLotNumResponse> OnChangeLotNumAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeLotNumRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeProcType", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeProcTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail), Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeProcTypeEpicorFaultDetailFa" +
            "ult", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeProcTypeResponse OnChangeProcType(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeProcTypeRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeProcType", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeProcTypeResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeProcTypeResponse> OnChangeProcTypeAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeProcTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeQuantity", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeQuantityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail), Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeQuantityEpicorFaultDetailFa" +
            "ult", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeQuantityResponse OnChangeQuantity(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeQuantityRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeQuantity", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeQuantityResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeQuantityResponse> OnChangeQuantityAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeQuantityRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeUOM", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeUOMResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail), Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeUOMEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeUOMResponse OnChangeUOM(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeUOMRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeUOM", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeUOMResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeUOMResponse> OnChangeUOMAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeUOMRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeWarehouse", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeWarehouseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail), Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeWarehouseEpicorFaultDetailF" +
            "ault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeWarehouseResponse OnChangeWarehouse(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeWarehouseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeWarehouse", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/OnChangeWarehouseResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeWarehouseResponse> OnChangeWarehouseAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeWarehouseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/ProcessType", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/ProcessTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail), Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/ProcessTypeEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.SplitMergeUOMSvc.ProcessTypeResponse ProcessType(EpicWAS.Epicor.SplitMergeUOMSvc.ProcessTypeRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/ProcessType", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/ProcessTypeResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.ProcessTypeResponse> ProcessTypeAsync(EpicWAS.Epicor.SplitMergeUOMSvc.ProcessTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/NegativeInventoryTest", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/NegativeInventoryTestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EpicWAS.Epicor.SplitMergeUOMSvc.EpicorFaultDetail), Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/NegativeInventoryTestEpicorFaultDet" +
            "ailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        EpicWAS.Epicor.SplitMergeUOMSvc.NegativeInventoryTestResponse NegativeInventoryTest(EpicWAS.Epicor.SplitMergeUOMSvc.NegativeInventoryTestRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/NegativeInventoryTest", ReplyAction="Erp:BO:SplitMergeUOM/SplitMergeUOMSvcContract/NegativeInventoryTestResponse")]
        System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.NegativeInventoryTestResponse> NegativeInventoryTestAsync(EpicWAS.Epicor.SplitMergeUOMSvc.NegativeInventoryTestRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CalculateRemainQty", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class CalculateRemainQtyRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public CalculateRemainQtyRequest() {
        }
        
        public CalculateRemainQtyRequest(string partNum, EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.partNum = partNum;
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CalculateRemainQtyResponse", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class CalculateRemainQtyResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public CalculateRemainQtyResponse() {
        }
        
        public CalculateRemainQtyResponse(EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPartXRefInfo", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class GetPartXRefInfoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public System.Guid SysRowID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=2)]
        public string rowType;
        
        public GetPartXRefInfoRequest() {
        }
        
        public GetPartXRefInfoRequest(string partNum, System.Guid SysRowID, string rowType) {
            this.partNum = partNum;
            this.SysRowID = SysRowID;
            this.rowType = rowType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPartXRefInfoResponse", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class GetPartXRefInfoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public string serialWarning;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=2)]
        public string questionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=3)]
        public bool multipleMatch;
        
        public GetPartXRefInfoResponse() {
        }
        
        public GetPartXRefInfoResponse(string partNum, string serialWarning, string questionString, bool multipleMatch) {
            this.partNum = partNum;
            this.serialWarning = serialWarning;
            this.questionString = questionString;
            this.multipleMatch = multipleMatch;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeBinNum", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeBinNumRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public string binNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=2)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeBinNumRequest() {
        }
        
        public OnChangeBinNumRequest(string partNum, string binNum, EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.partNum = partNum;
            this.binNum = binNum;
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeBinNumResponse", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeBinNumResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeBinNumResponse() {
        }
        
        public OnChangeBinNumResponse(EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeLotNum", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeLotNumRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public string lotNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=2)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeLotNumRequest() {
        }
        
        public OnChangeLotNumRequest(string partNum, string lotNum, EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.partNum = partNum;
            this.lotNum = lotNum;
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeLotNumResponse", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeLotNumResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeLotNumResponse() {
        }
        
        public OnChangeLotNumResponse(EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeProcType", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeProcTypeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public string processType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=2)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeProcTypeRequest() {
        }
        
        public OnChangeProcTypeRequest(string partNum, string processType, EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.partNum = partNum;
            this.processType = processType;
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeProcTypeResponse", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeProcTypeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeProcTypeResponse() {
        }
        
        public OnChangeProcTypeResponse(EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeQuantity", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeQuantityRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public decimal dQuantity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=2)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeQuantityRequest() {
        }
        
        public OnChangeQuantityRequest(string partNum, decimal dQuantity, EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.partNum = partNum;
            this.dQuantity = dQuantity;
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeQuantityResponse", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeQuantityResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeQuantityResponse() {
        }
        
        public OnChangeQuantityResponse(EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeUOM", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeUOMRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public string uOMCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=2)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeUOMRequest() {
        }
        
        public OnChangeUOMRequest(string partNum, string uOMCode, EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.partNum = partNum;
            this.uOMCode = uOMCode;
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeUOMResponse", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeUOMResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeUOMResponse() {
        }
        
        public OnChangeUOMResponse(EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeWarehouse", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeWarehouseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public string whseCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=2)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeWarehouseRequest() {
        }
        
        public OnChangeWarehouseRequest(string partNum, string whseCode, EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.partNum = partNum;
            this.whseCode = whseCode;
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnChangeWarehouseResponse", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class OnChangeWarehouseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public OnChangeWarehouseResponse() {
        }
        
        public OnChangeWarehouseResponse(EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ProcessType", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class ProcessTypeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public ProcessTypeRequest() {
        }
        
        public ProcessTypeRequest(string partNum, EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.partNum = partNum;
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ProcessTypeResponse", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class ProcessTypeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public ProcessTypeResponse() {
        }
        
        public ProcessTypeResponse(EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="NegativeInventoryTest", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class NegativeInventoryTestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string partNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public NegativeInventoryTestRequest() {
        }
        
        public NegativeInventoryTestRequest(string partNum, EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.partNum = partNum;
            this.ds = ds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="NegativeInventoryTestResponse", WrapperNamespace="Erp:BO:SplitMergeUOM", IsWrapped=true)]
    public partial class NegativeInventoryTestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=0)]
        public string negQtyAction;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=1)]
        public string negInvMessage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Erp:BO:SplitMergeUOM", Order=2)]
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds;
        
        public NegativeInventoryTestResponse() {
        }
        
        public NegativeInventoryTestResponse(string negQtyAction, string negInvMessage, EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            this.negQtyAction = negQtyAction;
            this.negInvMessage = negInvMessage;
            this.ds = ds;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SplitMergeUOMSvcContractChannel : EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SplitMergeUOMSvcContractClient : System.ServiceModel.ClientBase<EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract>, EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract {
        
        public SplitMergeUOMSvcContractClient() {
        }
        
        public SplitMergeUOMSvcContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SplitMergeUOMSvcContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SplitMergeUOMSvcContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SplitMergeUOMSvcContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.SplitMergeUOMSvc.CalculateRemainQtyResponse EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract.CalculateRemainQty(EpicWAS.Epicor.SplitMergeUOMSvc.CalculateRemainQtyRequest request) {
            return base.Channel.CalculateRemainQty(request);
        }
        
        public void CalculateRemainQty(string partNum, ref EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            EpicWAS.Epicor.SplitMergeUOMSvc.CalculateRemainQtyRequest inValue = new EpicWAS.Epicor.SplitMergeUOMSvc.CalculateRemainQtyRequest();
            inValue.partNum = partNum;
            inValue.ds = ds;
            EpicWAS.Epicor.SplitMergeUOMSvc.CalculateRemainQtyResponse retVal = ((EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract)(this)).CalculateRemainQty(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.CalculateRemainQtyResponse> CalculateRemainQtyAsync(EpicWAS.Epicor.SplitMergeUOMSvc.CalculateRemainQtyRequest request) {
            return base.Channel.CalculateRemainQtyAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.SplitMergeUOMSvc.GetPartXRefInfoResponse EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract.GetPartXRefInfo(EpicWAS.Epicor.SplitMergeUOMSvc.GetPartXRefInfoRequest request) {
            return base.Channel.GetPartXRefInfo(request);
        }
        
        public string GetPartXRefInfo(ref string partNum, System.Guid SysRowID, string rowType, out string questionString, out bool multipleMatch) {
            EpicWAS.Epicor.SplitMergeUOMSvc.GetPartXRefInfoRequest inValue = new EpicWAS.Epicor.SplitMergeUOMSvc.GetPartXRefInfoRequest();
            inValue.partNum = partNum;
            inValue.SysRowID = SysRowID;
            inValue.rowType = rowType;
            EpicWAS.Epicor.SplitMergeUOMSvc.GetPartXRefInfoResponse retVal = ((EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract)(this)).GetPartXRefInfo(inValue);
            partNum = retVal.partNum;
            questionString = retVal.questionString;
            multipleMatch = retVal.multipleMatch;
            return retVal.serialWarning;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.GetPartXRefInfoResponse> GetPartXRefInfoAsync(EpicWAS.Epicor.SplitMergeUOMSvc.GetPartXRefInfoRequest request) {
            return base.Channel.GetPartXRefInfoAsync(request);
        }
        
        public EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset GetSplitMergeHeadData(string partNum) {
            return base.Channel.GetSplitMergeHeadData(partNum);
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset> GetSplitMergeHeadDataAsync(string partNum) {
            return base.Channel.GetSplitMergeHeadDataAsync(partNum);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeBinNumResponse EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract.OnChangeBinNum(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeBinNumRequest request) {
            return base.Channel.OnChangeBinNum(request);
        }
        
        public void OnChangeBinNum(string partNum, string binNum, ref EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeBinNumRequest inValue = new EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeBinNumRequest();
            inValue.partNum = partNum;
            inValue.binNum = binNum;
            inValue.ds = ds;
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeBinNumResponse retVal = ((EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract)(this)).OnChangeBinNum(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeBinNumResponse> OnChangeBinNumAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeBinNumRequest request) {
            return base.Channel.OnChangeBinNumAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeLotNumResponse EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract.OnChangeLotNum(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeLotNumRequest request) {
            return base.Channel.OnChangeLotNum(request);
        }
        
        public void OnChangeLotNum(string partNum, string lotNum, ref EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeLotNumRequest inValue = new EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeLotNumRequest();
            inValue.partNum = partNum;
            inValue.lotNum = lotNum;
            inValue.ds = ds;
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeLotNumResponse retVal = ((EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract)(this)).OnChangeLotNum(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeLotNumResponse> OnChangeLotNumAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeLotNumRequest request) {
            return base.Channel.OnChangeLotNumAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeProcTypeResponse EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract.OnChangeProcType(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeProcTypeRequest request) {
            return base.Channel.OnChangeProcType(request);
        }
        
        public void OnChangeProcType(string partNum, string processType, ref EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeProcTypeRequest inValue = new EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeProcTypeRequest();
            inValue.partNum = partNum;
            inValue.processType = processType;
            inValue.ds = ds;
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeProcTypeResponse retVal = ((EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract)(this)).OnChangeProcType(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeProcTypeResponse> OnChangeProcTypeAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeProcTypeRequest request) {
            return base.Channel.OnChangeProcTypeAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeQuantityResponse EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract.OnChangeQuantity(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeQuantityRequest request) {
            return base.Channel.OnChangeQuantity(request);
        }
        
        public void OnChangeQuantity(string partNum, decimal dQuantity, ref EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeQuantityRequest inValue = new EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeQuantityRequest();
            inValue.partNum = partNum;
            inValue.dQuantity = dQuantity;
            inValue.ds = ds;
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeQuantityResponse retVal = ((EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract)(this)).OnChangeQuantity(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeQuantityResponse> OnChangeQuantityAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeQuantityRequest request) {
            return base.Channel.OnChangeQuantityAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeUOMResponse EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract.OnChangeUOM(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeUOMRequest request) {
            return base.Channel.OnChangeUOM(request);
        }
        
        public void OnChangeUOM(string partNum, string uOMCode, ref EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeUOMRequest inValue = new EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeUOMRequest();
            inValue.partNum = partNum;
            inValue.uOMCode = uOMCode;
            inValue.ds = ds;
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeUOMResponse retVal = ((EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract)(this)).OnChangeUOM(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeUOMResponse> OnChangeUOMAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeUOMRequest request) {
            return base.Channel.OnChangeUOMAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeWarehouseResponse EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract.OnChangeWarehouse(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeWarehouseRequest request) {
            return base.Channel.OnChangeWarehouse(request);
        }
        
        public void OnChangeWarehouse(string partNum, string whseCode, ref EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeWarehouseRequest inValue = new EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeWarehouseRequest();
            inValue.partNum = partNum;
            inValue.whseCode = whseCode;
            inValue.ds = ds;
            EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeWarehouseResponse retVal = ((EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract)(this)).OnChangeWarehouse(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeWarehouseResponse> OnChangeWarehouseAsync(EpicWAS.Epicor.SplitMergeUOMSvc.OnChangeWarehouseRequest request) {
            return base.Channel.OnChangeWarehouseAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.SplitMergeUOMSvc.ProcessTypeResponse EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract.ProcessType(EpicWAS.Epicor.SplitMergeUOMSvc.ProcessTypeRequest request) {
            return base.Channel.ProcessType(request);
        }
        
        public void ProcessType(string partNum, ref EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds) {
            EpicWAS.Epicor.SplitMergeUOMSvc.ProcessTypeRequest inValue = new EpicWAS.Epicor.SplitMergeUOMSvc.ProcessTypeRequest();
            inValue.partNum = partNum;
            inValue.ds = ds;
            EpicWAS.Epicor.SplitMergeUOMSvc.ProcessTypeResponse retVal = ((EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract)(this)).ProcessType(inValue);
            ds = retVal.ds;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.ProcessTypeResponse> ProcessTypeAsync(EpicWAS.Epicor.SplitMergeUOMSvc.ProcessTypeRequest request) {
            return base.Channel.ProcessTypeAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EpicWAS.Epicor.SplitMergeUOMSvc.NegativeInventoryTestResponse EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract.NegativeInventoryTest(EpicWAS.Epicor.SplitMergeUOMSvc.NegativeInventoryTestRequest request) {
            return base.Channel.NegativeInventoryTest(request);
        }
        
        public string NegativeInventoryTest(string partNum, ref EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMTableset ds, out string negInvMessage) {
            EpicWAS.Epicor.SplitMergeUOMSvc.NegativeInventoryTestRequest inValue = new EpicWAS.Epicor.SplitMergeUOMSvc.NegativeInventoryTestRequest();
            inValue.partNum = partNum;
            inValue.ds = ds;
            EpicWAS.Epicor.SplitMergeUOMSvc.NegativeInventoryTestResponse retVal = ((EpicWAS.Epicor.SplitMergeUOMSvc.SplitMergeUOMSvcContract)(this)).NegativeInventoryTest(inValue);
            negInvMessage = retVal.negInvMessage;
            ds = retVal.ds;
            return retVal.negQtyAction;
        }
        
        public System.Threading.Tasks.Task<EpicWAS.Epicor.SplitMergeUOMSvc.NegativeInventoryTestResponse> NegativeInventoryTestAsync(EpicWAS.Epicor.SplitMergeUOMSvc.NegativeInventoryTestRequest request) {
            return base.Channel.NegativeInventoryTestAsync(request);
        }
    }
}
